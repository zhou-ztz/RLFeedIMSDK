// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RLIMFeedSDK
import AVFAudio
import AVFoundation
import AVKit
import ActiveLabel
import Alamofire
import AliyunOSSiOS
import AliyunPlayer
import AliyunVideoSDKPro
import Apollo
import AppCenter
import AssetsLibrary
import Combine
import CommonCrypto
import Contacts
import CoreLocation
import CoreMedia
import CoreTelephony
import CropViewController
import CryptoSwift
import DeepDiff
import FLAnimatedImage
import FSPagerView
import Foundation
import Hero
import IQKeyboardManagerSwift
import ImageIO
import InputBarAccessoryView
import Instructions
import KMPlaceholderTextView
import KeychainAccess
import Kronos
import Lokalise
import Lottie
import MBProgressHUD
import MJRefresh
import MapKit
import MediaPlayer
import MessageUI
import MobileCoreServices
import NEMeetingKit
import NERoomKit
import NERtcSDK
import NIMPrivate
import NIMSDK
import NaturalLanguage
import OBS
import ObjectBox
import ObjectMapper
import ObjectiveC
import OpenGLES
import Photos
import PhotosUI
import PusherSwift
@_exported import RLIMFeedSDK
import Reachability
import Realm
import RealmSwift
import Regex
import SCRecorder
import SDWebImage
import SDWebImageFLPlugin
import SSZipArchive
import SVProgressHUD
import Security
import SnapKit
import SobotKit
import Speech
import StoreKit
import Swift
import SwiftDate
import SwiftEntryKit
import SwiftHEXColors
import SwiftLinkPreview
import SwiftSoup
import SwiftUI
import SwiftyJSON
import SwiftyUserDefaults
import TTVideoEditor
import TYAttributedLabel
import TZImagePickerController
import Toast
import UIKit
import WebKit
import XCGLogger
import YYCategories
import YYText
import YYWebImage
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iOSPhotoEditor
import os.log
import os
public protocol ThumbSelectorViewDelegate : AnyObject {
  func didChangeThumbPosition(_ imageTime: CoreMedia.CMTime)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ThumbSelectorView : RLIMFeedSDK.AVAssetTimeSelector {
  @_Concurrency.MainActor(unsafe) public var thumbBorderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any RLIMFeedSDK.ThumbSelectorViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var selectedTime: CoreMedia.CMTime? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.NSMutableAttributedString {
  convenience public init(str: Swift.String, font: UIKit.UIFont?, color: UIKit.UIColor?)
}
extension Foundation.NSNotification.Name {
  public struct ImagePicker {
    public static let camera: Foundation.NSNotification.Name
    public static let finish: Foundation.NSNotification.Name
  }
}
public protocol Then {
}
extension RLIMFeedSDK.Then {
  @discardableResult
  public func configure(_ block: (inout Self) -> Swift.Void) -> Self
  @discardableResult
  public func build(_ block: (inout Self) -> Swift.Void) -> Self
}
extension ObjectiveC.NSObject : RLIMFeedSDK.Then {
}
extension UIKit.UIView : RLIMFeedSDK.Then {
}
public protocol ArtistHeaderViewDelegate : AnyObject {
  func viewMyMoments(uid: Swift.String)
  func updateHeader()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BallSpinFadeIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Constants : ObjectiveC.NSObject {
  @objc public static let watermarkSize: CoreFoundation.CGFloat
  @objc public static var bestPixelRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static let kmd5Key: Swift.String
  @objc public static let NIMKey: Swift.String
  @objc public static let pageSize: Swift.Int
  @objc public static let platform: Swift.String
  @objc public static let stickerPerPage: Swift.Int
  @objc public static let emojiPerPage: Swift.Int
  @objc public static let stickerThumbHeight: Swift.Int
  @objc public static let stickerThumbWidth: Swift.Int
  @objc public static let stickerSize: Swift.Int
  @objc public static let emojiContainerHeight: CoreFoundation.CGFloat
  @objc public static let textToolbarHeight: CoreFoundation.CGFloat
  @objc public static let voucherHeight: CoreFoundation.CGFloat
  @objc public static let USER_DOWNLOADED_STICKER_BUNDLE_PLIST: Swift.String
  @objc public static let USER_DOWNLOADED_STICKER_BUNDLE_PREFIX: Swift.String
  @objc public static let USER_DOWNLOADED_FU_BUNDLE_PLIST: Swift.String
  @objc public static let VoiceOrVideoMuteNotificationKey: Swift.String
  @objc public static let ShowFrontOrBackCameraKey: Swift.String
  @objc public static let GlobalChatWallpaperImageKey: Swift.String
  @objc public static let ChatDraftKey: Swift.String
  @objc public static let UserStickerDefaultKey: Swift.String
  @objc public static let secretMessageTimerKey: Swift.String
  @objc public static let energyUrls: Swift.String
  @objc public static let trtEnergyUrls: Swift.String
  @objc public static let socialSignedInUserID: Swift.String
  @objc public static let baseUserDefaultKey: Swift.String
  @objc public static let supportEmail: Swift.String
  @objc public static let schemeAuthentication: Swift.String
  @objc public static let hostAuthenticationCs: Swift.String
  @objc public static let redPay: Swift.String
  @objc public static let shopeePay: Swift.String
  @objc public static let minimumUsernameLength: Swift.Int
  @objc public static let maximumUsernameLength: Swift.Int
  @objc public static let maximumGroupNameLength: Swift.Int
  @objc public static let timeout: Swift.Double
  @objc public static let maximumTeamMemberAuthCompulsory: Swift.Int
  @objc public static let maximumTeamMemberAuthFromCardView: Swift.Int
  @objc public static let maximumSendContactCount: Swift.Int
  @objc public static let maximumRequestCount: Swift.Int
  @objc public static let maximumLiveInfoTextCount: Swift.Int
  @objc public static let minimumLiveInfoTextCount: Swift.Int
  @objc public static let appStoreUrl: Foundation.URL
  public struct Layout {
    public static let stickerCellHeight: CoreFoundation.CGFloat
    public static let bannerHeight: CoreFoundation.CGFloat
    public static let stickerCollectionRowHeight: CoreFoundation.CGFloat
    public static let stickerHeaderHeight: CoreFoundation.CGFloat
    public static let stickerFeaturedCellHeight: CoreFoundation.CGFloat
    public static let SearchCellContentFontSize: CoreFoundation.CGFloat
    public static let SearchCellContentBottom: CoreFoundation.CGFloat
    public static let SearchCellContentTop: CoreFoundation.CGFloat
    public static let SearchCellContentMaxWidth: CoreFoundation.CGFloat
    public static let SearchCellContentMinHeight: CoreFoundation.CGFloat
    public static let nameLabelMaxSize: CoreFoundation.CGFloat
    public static let UIScreenWidth: CoreFoundation.CGFloat
    public static let UIScreenHeight: CoreFoundation.CGFloat
    public static let UISreenWidthScale: Swift.Int
    public static let MessageCellMaxHeight: Swift.Int
  }
  public struct KeyChain {
    public static let username: Swift.String
  }
  public struct Headers {
    public static let ClientType: Swift.String
    public static let ClientVersion: Swift.String
    public static let DeviceID: Swift.String
    public static let DeviceOS: Swift.String
    public static let Accept: Swift.String
    public static let DeviceModel: Swift.String
    public static let IOSDevice: Swift.String
    public static let AcceptLanguage: Swift.String
    public static let AuthToken: Swift.String
    public static let AppFavor: Swift.String
    public static let ClientAppName: Swift.String
    public static let AppName: Swift.String
    public static let DeviceCountry: Swift.String
  }
  @objc public static let toastPosition: CoreFoundation.CGPoint
  @objc public static let YippiWallet: Swift.String
  @objc public static let whatIsWaveHans: Swift.String
  @objc public static let whatIsWaveEn: Swift.String
  @objc public static let ScienceWaveEn: Swift.String
  @objc public static let ScienceWaveHans: Swift.String
  @objc public static let WaveDisclaimer: Swift.String
  @objc public static let swiftCodeInfoLink: Swift.String
  @objc public static let VideoPlayerPlayButtonWidth: CoreFoundation.CGFloat
  @objc public static let VideoPlayerPlayButtonHeight: CoreFoundation.CGFloat
  @objc public static let YippiNetCallRingtone: Swift.String
  @objc public static let RewardLinkUserDefaultKey: Swift.String
  @objc public static let RewardsLinkScheme: Swift.String
  @objc public static let merchantQRCode: Swift.String
  public struct NIM {
    public static let NIMKit_EmojiCatalog: Swift.String
    public static let NIMKit_EmojiPath: Swift.String
    public static let NIMKit_ChartletChartletCatalogPath: Swift.String
    public static let NIMKit_ChartletChartletCatalogContentPath: Swift.String
    public static let NIMKit_ChartletChartletCatalogIconPath: Swift.String
    public static let NIMKit_ChartletChartletCatalogIconsSuffixNormal: Swift.String
    public static let NIMKit_ChartletChartletCatalogIconsSuffixHighLight: Swift.String
    public static let NIMKit_EmojiLeftMargin: Swift.Int
    public static let NIMKit_EmojiRightMargin: Swift.Int
    public static let NIMKit_EmojiTopMargin: Swift.Int
    public static let NIMKit_DeleteIconWidth: CoreFoundation.CGFloat
    public static let NIMKit_DeleteIconHeight: CoreFoundation.CGFloat
    public static let NIMKit_EmojCellHeight: CoreFoundation.CGFloat
    public static let NIMKit_EmojImageHeight: CoreFoundation.CGFloat
    public static let NIMKit_EmojImageWidth: CoreFoundation.CGFloat
    public static let NIMKit_EmojRows: Swift.Int
    public static let NIMKit_PicCellHeight: CoreFoundation.CGFloat
    public static let NIMKit_PicImageHeight: CoreFoundation.CGFloat
    public static let NIMKit_PicImageWidth: CoreFoundation.CGFloat
    public static let NIMKit_PicRows: Swift.Int
    public static let NIMKit_ViewWidth: CoreFoundation.CGFloat
    public static let NIMKit_ViewHeight: CoreFoundation.CGFloat
    public static let NIMKit_BottomViewHeight: CoreFoundation.CGFloat
    public static let NIMKit_TimeFontSize: CoreFoundation.CGFloat
    public static let NIMKit_TipFontSize: CoreFoundation.CGFloat
    public static let NIMKit_TextFontSize: CoreFoundation.CGFloat
    public static let NIMInputEmoticonTabViewHeight: CoreFoundation.CGFloat
    public static let NIMInputEmoticonSendButtonWidth: CoreFoundation.CGFloat
    public static let NIMInputLineBoarder: CoreFoundation.CGFloat
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NotificationKeys : ObjectiveC.NSObject {
  @objc public static let forceLoggedOut: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public struct App {
    public static let forceUpdateRequired: Foundation.Notification.Name
    public static let showAnnouncement: Foundation.Notification.Name
  }
  public struct Session {
    public static let forceLoggedOut: Foundation.Notification.Name
  }
}
@objc public enum WalletType : Swift.Int {
  case yipps
  case cpoint
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CoreDependencyType {
  @objc func resolveViewControllerFactory() -> any RLIMFeedSDK.ViewControllerFactoryType
  @objc func resolvePopupDialogFactory() -> any RLIMFeedSDK.PopupDialogFactoryType
  @objc func resolveUtilityFactory() -> any RLIMFeedSDK.UtilityFactoryType
  @objc func resolveViewFactory() -> any RLIMFeedSDK.ViewFactoryType
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DependencyContainer : ObjectiveC.NSObject, RLIMFeedSDK.CoreDependencyType {
  @objc public func resolveViewFactory() -> any RLIMFeedSDK.ViewFactoryType
  @objc public func resolveUtilityFactory() -> any RLIMFeedSDK.UtilityFactoryType
  @objc public func resolveViewControllerFactory() -> any RLIMFeedSDK.ViewControllerFactoryType
  @objc public func resolvePopupDialogFactory() -> any RLIMFeedSDK.PopupDialogFactoryType
  @objc public static let shared: RLIMFeedSDK.DependencyContainer
  @objc public func register(_ coreDependency: any RLIMFeedSDK.CoreDependencyType)
  @objc override dynamic public init()
  @objc deinit
}
public struct Device {
  public static let currentUDID: Swift.String
  public static func currentCountry() -> RLIMFeedSDK.Country?
  public static var appLoction: CoreLocation.CLLocation
  public static var sizeRatioBasedOnIphone8: CoreFoundation.CGFloat {
    get
  }
  public static func appVersion() -> Swift.String
  public static func appBuildNumber() -> Swift.String
  public static func hasTopNotch() -> Swift.Bool
  public static func safeTop() -> Swift.Int
  public static var isLandscape: Swift.Bool {
    get
  }
  public static var screenOrientation: UIKit.UIDeviceOrientation {
    get
  }
  public static var modelName: Swift.String {
    get
  }
  public static func isSmallScreenDevice() -> Swift.Bool
  public static func vibrate()
}
@objc public protocol ExpandableLabelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func willExpandLabel(_ label: RLIMFeedSDK.ExpandableLabel)
  @objc func didExpandLabel(_ label: RLIMFeedSDK.ExpandableLabel)
  @objc func willCollapseLabel(_ label: RLIMFeedSDK.ExpandableLabel)
  @objc func didCollapseLabel(_ label: RLIMFeedSDK.ExpandableLabel)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class ExpandableLabel : UIKit.UILabel {
  public enum TextReplacementType {
    case character
    case word
    public static func == (a: RLIMFeedSDK.ExpandableLabel.TextReplacementType, b: RLIMFeedSDK.ExpandableLabel.TextReplacementType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any RLIMFeedSDK.ExpandableLabelDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var collapsed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldExpand: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldCollapse: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var collapsedAttributedLink: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var expandedAttributedLink: Foundation.NSAttributedString?
  @objc @_Concurrency.MainActor(unsafe) open var ellipsis: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var animationView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open var textReplacementType: RLIMFeedSDK.ExpandableLabel.TextReplacementType
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var numberOfLines: ObjectiveC.NSInteger {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set(text)
  }
  @_Concurrency.MainActor(unsafe) open var expandedText: Foundation.NSAttributedString? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set(attributedText)
  }
  @_Concurrency.MainActor(unsafe) open func setLessLinkWith(lessLink: Swift.String, attributes: [Foundation.NSAttributedString.Key : Swift.AnyObject], position: UIKit.NSTextAlignment?)
  @objc deinit
}
extension RLIMFeedSDK.ExpandableLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class SessionCardViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension RLIMFeedSDK.SessionCardViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
public struct AppInfo : Swift.Codable, SwiftyUserDefaults.DefaultsSerializable {
  public let featureGame: [RLIMFeedSDK.FeatureGame]?
  public let annoucement: RLIMFeedSDK.Annoucement?
  public let needUpdate: Swift.Bool
  public let modules: [RLIMFeedSDK.AppModule]
  public let waveUrl: Swift.String
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.AppInfo]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.AppInfo>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Annoucement : Swift.Codable {
  public let showAnnoucement: Swift.Int
  public let annoucementImage: Swift.String
  public let annoucementInstruction: Swift.String
  public let annoucementType: Swift.String
  public let annoucementData: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeatureGame : Swift.Codable {
  public let gameID: Swift.String
  public let gameIcon: Swift.String
  public let gameName: Swift.String
  public let description: Swift.String
  public let isOfficial: Swift.String
  public let addedTimestamp: Swift.String
  public let gameURL: Swift.String
  public let androidStatus: Swift.String
  public let iosStatus: Swift.String
  public let gameSequence: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AppModuleId : Swift.Int {
  case News
  case Games
  case PeopleNearby
  case Sticker
  case Eostrewave
  case YippiEvent
  case RewardsLink
  case TAMall
  case Shopping
  case Education
  case PaidSticker
  case FaceUnity
  case ScanTransfer
  case VIPSubscribe
  case HotelFlight
  case Report
  case Live
  case CustomerSupport
  case IAP
  case HallOfFame
  case GamificationLeveling
  case Gintell
  case MobileTopUp
  case FeedBlockButton
  case MiniProgram
  case UtilitiesBill
  case Incubator
  case Wallet
  case YippsHunter
  case ReferAndEarn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct AppModule : Swift.Codable {
  public let id: Swift.String
  public let module: Swift.String
  public let status: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class Debouncer : ObjectiveC.NSObject {
  public init(delay: Swift.Double)
  public func execute()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class IMSendMsgIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias WebViewBackClosure = () -> Swift.Void
public enum MinAmount : Swift.Codable {
  case int(Swift.Int)
  case float(Swift.Float)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum OffsetPercentage : Swift.Codable {
  case int(Swift.Int)
  case string(Swift.Float)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class HashtagRequest {
  @objc deinit
}
public protocol ServicesType {
  var usersProvider: (any RLIMFeedSDK.UsersProviderType)! { get }
}
public struct Services : RLIMFeedSDK.ServicesType {
  public var usersProvider: (any RLIMFeedSDK.UsersProviderType)!
  public init()
}
extension RealmSwift.Realm {
  public func safeWrite(_ block: (() throws -> Swift.Void)) throws
}
public enum BuildConfiguration {
  case debug
  case release
  public static func == (a: RLIMFeedSDK.BuildConfiguration, b: RLIMFeedSDK.BuildConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ServerEnvironment {
  case production
  case preprod
  case staging
  case custom
  public static func == (a: RLIMFeedSDK.ServerEnvironment, b: RLIMFeedSDK.ServerEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ServerConfig : Swift.Codable, SwiftyUserDefaults.DefaultsSerializable, ObjectMapper.Mappable {
  public var sobotGroupId: Swift.String
  public var isHiddenGuestLoginButtonInLaunch: Swift.Bool?
  public var engageKey: Swift.String
  public var apiBaseURL: Swift.String
  public var bizApiBaseURL: Swift.String
  public var eventApiBaseURL: Swift.String
  public var identifier: Swift.String
  public var pushLiveHost: Swift.String
  public var pullLiveHost: Swift.String
  public var starQuestPusherKey: Swift.String
  public var alipayProductID: Swift.String
  public var alipayAppID: Swift.String
  public var miniProgramKey: Swift.String
  public var miniProgramSecret: Swift.String
  public var miniProgramServer: Swift.String
  public var eshopAppId: Swift.String
  public var uploadFileURL: Swift.String
  public var guestUsername: Swift.String
  public var merchantAppId: Swift.String
  public var togagoClientId: Swift.String
  public var togagoUrl: Swift.String
  public var merchantHost: Swift.String
  public var charityAppId: Swift.String
  public var creatorCenterAppId: Swift.String
  public var mapMerchantAppId: Swift.String
  public var rlCheckInAppId: Swift.String
  public var yippsHunterAppId: Swift.String
  public var universalLinkApiSchema: Swift.String
  public var universalLinkWebSchema: Swift.String
  public var universalLinkRegisterSchema: Swift.String
  public var deepLinkSchema: Swift.String
  public var afAppID: Swift.String
  public var afDevKey: Swift.String
  public var afInviteOneLinkID: Swift.String
  public var afBrandDomain: Swift.String
  public var NTESVerifyCodeID: Swift.String
  public var imAppKey: Swift.String
  public var imApnsName: Swift.String
  public var lokaliseProjectID: Swift.String
  public var lokaliseSDKToken: Swift.String
  public var scashURL: Swift.String
  public var redpayURL: Swift.String
  public static var production: RLIMFeedSDK.ServerConfig
  public static var preproduction: RLIMFeedSDK.ServerConfig
  public static var staging: RLIMFeedSDK.ServerConfig
  public static var custom: RLIMFeedSDK.ServerConfig
  public init?(map: ObjectMapper.Map)
  public mutating func fetchEntitlement()
  public mutating func mapping(map: ObjectMapper.Map)
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.ServerConfig]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.ServerConfig>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Environment {
  public let bundleIdentifier: Swift.String
  public var config: RLIMFeedSDK.ServerConfig
  public let currentUser: RLIMFeedSDK.TSUser?
  public let appInfo: RLIMFeedSDK.AppInfo?
  public let featureFlags: RLIMFeedSDK.FeatureFlags
  public init(config: RLIMFeedSDK.ServerConfig = .production, appInfo: RLIMFeedSDK.AppInfo? = nil, currentUser: RLIMFeedSDK.TSUser? = nil)
  public var appVersion: Swift.String {
    get
  }
  public var buildVersion: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AppEnvironment : ObjectiveC.NSObject {
  public static let AppEnvinronmentIdentifier: Swift.String
  public static var current: RLIMFeedSDK.Environment! {
    get
  }
  public static func pushEnvironment(_ env: RLIMFeedSDK.Environment)
  public static func replaceCurrentEnvironment(_ env: RLIMFeedSDK.Environment)
  public static func setup(completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
public func rectWidth(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectHeight(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectX(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectY(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectTop(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectBottom(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectLeft(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
public func rectRight(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
extension Foundation.JSONDecoder.DateDecodingStrategy {
  public static let iso8601withFractionalSeconds: Foundation.JSONDecoder.DateDecodingStrategy
}
extension Foundation.JSONEncoder.DateEncodingStrategy {
  public static let iso8601withFractionalSeconds: Foundation.JSONEncoder.DateEncodingStrategy
}
extension Foundation.Formatter {
  public static let iso8601: Foundation.DateFormatter
}
public enum YPHTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objcMembers public class YPRequestData {
  final public let method: RLIMFeedSDK.YPHTTPMethod
  final public let params: [Swift.String : Any?]?
  @objc public var fullPath: Swift.String {
    @objc get
  }
  public init(baseUrl: Swift.String, path: Swift.String, method: RLIMFeedSDK.YPHTTPMethod = .get, params: [Swift.String : Any?]? = nil)
  convenience public init(path: Swift.String, method: RLIMFeedSDK.YPHTTPMethod = .get, params: [Swift.String : Any?]? = nil)
  public init(apiPaymentBaseURL: Swift.String, path: Swift.String, method: RLIMFeedSDK.YPHTTPMethod = .get, params: [Swift.String : Any?]? = nil)
  @objc deinit
}
public protocol RequestType {
  associatedtype T : RLIMFeedSDK.YPRequestData
  associatedtype ResponseType : Swift.Decodable
  var data: Self.T { get }
}
extension RLIMFeedSDK.RequestType {
  @discardableResult
  public func execute(dispatcher: any RLIMFeedSDK.NetworkDispatcherProtocol = URLSessionNetworkDispatcher.instance, onSuccess: @escaping (Self.ResponseType?) -> Swift.Void, onError: @escaping (RLIMFeedSDK.YPErrorType) -> Swift.Void) -> Foundation.URLSessionDataTask?
}
public protocol NetworkDispatcherProtocol {
  func dispatch(request: RLIMFeedSDK.YPRequestData, onSuccess: @escaping (Foundation.Data, Swift.Int?) -> Swift.Void, onError: @escaping (RLIMFeedSDK.YPErrorType) -> Swift.Void) -> Foundation.URLSessionDataTask?
}
@_hasMissingDesignatedInitializers public class URLSessionNetworkDispatcher : RLIMFeedSDK.NetworkDispatcherProtocol {
  public static let instance: RLIMFeedSDK.URLSessionNetworkDispatcher
  public func dispatch(request: RLIMFeedSDK.YPRequestData, onSuccess: @escaping (Foundation.Data, Swift.Int?) -> Swift.Void, onError: @escaping (RLIMFeedSDK.YPErrorType) -> Swift.Void) -> Foundation.URLSessionDataTask?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class YPHTTPHeaderFields {
  public static var headers: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public enum YPErrorType : Swift.Error {
  case serverUnavailable
  case unauthorized
  case invalidUrl
  case noData
  case mappingError(_: Swift.String?)
  case carriesMessage(_: Swift.String, code: Swift.Int, errCode: Swift.Int?)
  case violations(_: Swift.String, violations: [Swift.String : Any])
  case unIdentified(_: Swift.Dictionary<Swift.String, Any?>, code: Swift.Int)
  case noCode
  case error(_: Swift.String, code: RLIMFeedSDK.ErrorCode)
}
public enum ErrorCode : Swift.Int {
  case offTransactionException
  case settingNotFoundException
  case userVerifyException
  case invalidTransactionException
  case invalidPasswordException
  case invalidAmountException
  case invalidPhoneException
  case customValidationException
  case transactionFreezeException
  case dailyLimitException
  case loginFailedAttemptsException
  case restrictionException
  case otpWaitException
  case otpVerifyException
  case invalidSecurityPinException
  case securityPinNotSetException
  case pinIsLockedException
  case suspiciousActivity
  case transactionIdMissingException
  case insufficientBalanceException
  case aeropayException
  case partnerFailException
  case purchaseFailException
  case invalidCountryException
  case orderClaimedException
  case rewardFinishException
  case tipsException
  case redPacketClaimException
  case eggExpiredException
  case liveEggCountingDownException
  case userNotEligibleException
  case userRewardFinishException
  case socialTokenRedeemRefunded
  case socialTokenRedeemReachedLimit
  case socialTokenRedeemUserNotKYC
  case socialTokenRedeemSoldOut
  case objectNotFoundException
  case socialAccountException
  case timeoutException
  case signExpiredException
  case transactionRefIdExistsException
  case meetingEndOrInexistence
  case meetingNumberLimit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.Timer {
  convenience public init<T>(fireAt fireDate: Foundation.Date, interval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping (T) -> Swift.Void) where T : Foundation.Timer
  convenience public init(fireAt fireDate: Foundation.Date, interval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping () -> Swift.Void)
  convenience public init<T>(timeInterval interval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping (T) -> Swift.Void) where T : Foundation.Timer
  convenience public init(timeInterval interval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping () -> Swift.Void)
  @discardableResult
  public class func scheduledTimer<T>(timeInterval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping (T) -> Swift.Void) -> Foundation.Timer where T : Foundation.Timer
  @discardableResult
  public class func scheduledTimer(timeInterval: Foundation.TimeInterval, userInfo: Swift.AnyObject? = nil, repeats: Swift.Bool = false, action: @escaping () -> Swift.Void) -> Foundation.Timer
}
public var YPApolloClient: Apollo.ApolloClient {
  get
}
public var YPCustomHeaders: [Swift.String : Swift.String] {
  get
}
public enum TSToolType : Swift.Int {
  case scan
  case nearBy
  case contact
  case groupInvate
  case note
  case collection
  case text
  case photo
  case live
  case video
  case miniVideo
  case system
  case level
  case support
  case referAndEarn
  case rejected
  case settings
  case share
  case sendMsg
  case invite
  case report
  case blackList
  case newChat
  case meeting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers open class TSToolModel : ObjectiveC.NSObject {
  @objc deinit
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showToolChoose(identifier: Swift.String, data: [RLIMFeedSDK.TSToolModel], arrowPosition: RLIMFeedSDK.TSToolChoose.ArrowPosition, preferences: RLIMFeedSDK.ToolChoosePreferences = ToolChoosePreferences(), delegate: (any RLIMFeedSDK.ToolChooseDelegate)? = nil, isMessage: Swift.Bool) -> RLIMFeedSDK.TSToolChoose
}
public protocol ToolChooseDelegate : AnyObject {
  func didSelectedItem(type: RLIMFeedSDK.TSToolType, title: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class ToolChoosePreferences : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class Drawing : ObjectiveC.NSObject {
    @objc @_inheritsConvenienceInitializers public class Arrow : ObjectiveC.NSObject {
      public var tip: CoreFoundation.CGPoint
      public var size: CoreFoundation.CGSize
      public var tipCornerRadius: CoreFoundation.CGFloat
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Bubble : ObjectiveC.NSObject {
      @objc @_inheritsConvenienceInitializers public class Border : ObjectiveC.NSObject {
        public var color: UIKit.UIColor?
        public var width: CoreFoundation.CGFloat
        @objc override dynamic public init()
        @objc deinit
      }
      public var inset: CoreFoundation.CGFloat
      public var spacing: CoreFoundation.CGFloat
      public var cornerRadius: CoreFoundation.CGFloat
      public var maxWidth: CoreFoundation.CGFloat
      public var color: UIKit.UIColor {
        get
        set
      }
      public var gradientLocations: [CoreFoundation.CGFloat]
      public var gradientColors: [UIKit.UIColor]
      public var border: RLIMFeedSDK.ToolChoosePreferences.Drawing.Bubble.Border
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Title : ObjectiveC.NSObject {
      public var font: UIKit.UIFont
      public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Message : ObjectiveC.NSObject {
      public var font: UIKit.UIFont
      public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Button : ObjectiveC.NSObject {
      public var font: UIKit.UIFont
      public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Background : ObjectiveC.NSObject {
      public var color: UIKit.UIColor {
        get
        set
      }
      public var gradientLocations: [CoreFoundation.CGFloat]
      public var gradientColors: [UIKit.UIColor]
      @objc override dynamic public init()
      @objc deinit
    }
    public var arrow: RLIMFeedSDK.ToolChoosePreferences.Drawing.Arrow
    public var bubble: RLIMFeedSDK.ToolChoosePreferences.Drawing.Bubble
    public var title: RLIMFeedSDK.ToolChoosePreferences.Drawing.Title
    public var message: RLIMFeedSDK.ToolChoosePreferences.Drawing.Message
    public var button: RLIMFeedSDK.ToolChoosePreferences.Drawing.Button
    public var background: RLIMFeedSDK.ToolChoosePreferences.Drawing.Background
    public var rowHeight: CoreFoundation.CGFloat
    public var rowMax: Swift.Int
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Animating : ObjectiveC.NSObject {
    public var dismissTransform: CoreFoundation.CGAffineTransform
    public var showInitialTransform: CoreFoundation.CGAffineTransform
    public var showFinalTransform: CoreFoundation.CGAffineTransform
    public var springDamping: CoreFoundation.CGFloat
    public var springVelocity: CoreFoundation.CGFloat
    public var showInitialAlpha: CoreFoundation.CGFloat
    public var dismissFinalAlpha: CoreFoundation.CGFloat
    public var showDuration: Swift.Double
    public var dismissDuration: Swift.Double
    @objc override dynamic public init()
    @objc deinit
  }
  public var drawing: RLIMFeedSDK.ToolChoosePreferences.Drawing
  public var animating: RLIMFeedSDK.ToolChoosePreferences.Animating
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TSToolChoose : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  public enum ArrowPosition : Swift.Int {
    case top
    case right
    case bottom
    case left
    case topRight
    case topRightWithButtonHeight
    case none
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) final public let controller: RLIMFeedSDK.ToolTipViewController
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
}
extension RLIMFeedSDK.TSToolChoose : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor(unsafe) convenience public init<T>(action: @escaping (T) -> Swift.Void) where T : UIKit.UIGestureRecognizer
  @_Concurrency.MainActor(unsafe) convenience public init(action: @escaping () -> Swift.Void)
}
extension Foundation.Date {
  public static func getCurrentTime() -> Foundation.Date
  public func string(format: Swift.String = "yyyy-MM-dd HH:mm:ss", timeZone: Foundation.TimeZone? = TimeZone.current) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LocalRemarkName : ObjectiveC.NSObject {
  @objc @discardableResult
  public static func getRemarkName(userId: Swift.String?, username: Swift.String?, originalName: Swift.String?, label: UIKit.UILabel?) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Double {
  public var toFloat: Swift.Float {
    get
  }
  public func asString(style: Foundation.DateComponentsFormatter.UnitsStyle) -> Swift.String
}
public enum CountType {
  case auto
  case short
  case full
  public static func == (a: RLIMFeedSDK.CountType, b: RLIMFeedSDK.CountType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Double {
  public func toCountDown(_ handleType: RLIMFeedSDK.CountType) -> Swift.String
}
extension Foundation.NSDictionary {
  public func valueAsDouble(forKey: Swift.String, defaultValue: Swift.Double = 0) -> Swift.Double
  public func valueAsFloat(forKey: Swift.String, defaultValue: Swift.Float = 0) -> Swift.Float
  public func valueAsInt(forKey: Swift.String, defaultValue: Swift.Int = 0) -> Swift.Int
  public func valueAsString(forKey: Swift.String, defaultValue: Swift.String = "") -> Swift.String
  public func valueAsBoolean(forKey: Swift.String, defaultValue: Swift.Bool = false) -> Swift.Bool
}
public let kConversationUtilDataDiggsObjectKey: Swift.String
public let kConversationUtilDataCommentsObjectKey: Swift.String
public let kConversationUtilDataPinnedsObjectKey: Swift.String
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LineScaleIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let kCellRowHeight: CoreFoundation.CGFloat
public let kCellRowHeightForEvent: CoreFoundation.CGFloat
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String, speedMultiplier: Swift.Double = 0.0)
}
extension UIKit.UIImage {
  convenience public init?(contentsOfURL url: Swift.String)
  public class func gif(data: Foundation.Data, speedMultiplier: Swift.Double = 0.0) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String, speedMultiplier: Swift.Double = 0.0) -> UIKit.UIImage?
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class LoadingHUD : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(name: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func play()
  @objc @_Concurrency.MainActor(unsafe) public func setProgress(_ value: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EditorLoadingHUD : ObjectiveC.NSObject {
  @objc public static func show()
  @objc public static func setProgress(_ value: Swift.String)
  @objc public static func dismiss()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class ChatDetailViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension RLIMFeedSDK.ChatDetailViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
public struct FeatureFlags : Swift.Codable, SwiftyUserDefaults.DefaultsSerializable {
  public let shouldFeedListloadUserInfo: Swift.Bool
  public let enableArticleCreationInEvents: Swift.Bool
  public let enableExpandTagsInEvents: Swift.Bool
  public static func load() -> RLIMFeedSDK.FeatureFlags
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.FeatureFlags]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.FeatureFlags>
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LoggingType {
  case exception, networkError, apiRequestData, apiResponseData, others
  public static func == (a: RLIMFeedSDK.LoggingType, b: RLIMFeedSDK.LoggingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LogManager : ObjectiveC.NSObject {
  @objc public class func LogError(name: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, funName: Swift.String = #function, reason: Swift.String?)
  @objc public class func BFLogError(name: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, funName: Swift.String = #function, code: Swift.Int, description: Swift.String?)
  public class func Log(_ object: Any..., name: Swift.String = "", file: Swift.String = #file, line: Swift.Int = #line, funName: Swift.String = #function, loggingType: RLIMFeedSDK.LoggingType)
  @objc public class func setDeviceString(_ string: Swift.String, forKey key: Swift.String)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TSScrollSegmentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var segmentStyle: RLIMFeedSDK.SegmentStyle
  @_Concurrency.MainActor(unsafe) open var titleBtnOnClick: ((_ label: UIKit.UILabel, _ index: Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var backgroundImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, segmentStyle: RLIMFeedSDK.SegmentStyle, titles: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension RLIMFeedSDK.TSScrollSegmentView {
  @_Concurrency.MainActor(unsafe) public func selectedIndex(_ selectedIndex: Swift.Int, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func reloadTitlesWithNewTitles(_ titles: [Swift.String])
}
extension RLIMFeedSDK.TSScrollSegmentView {
  @_Concurrency.MainActor(unsafe) public func adjustTitleOffSetToCurrentIndex(_ currentIndex: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) open var currentTransformSx: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UITabBarItem {
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage, selectedImage: UIKit.UIImage)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BallPulseSyncIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PopupMenuArrowDirection : Swift.Int {
  case top
  case bottom
  case left
  case right
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FileURLComponents {
}
public protocol FileWritable {
  func write(to fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Foundation.URL
}
public protocol FileReadable {
  static func read<T>(_ type: T.Type, from fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> T where T : Swift.Decodable
}
public protocol FileDeletable {
  static func delete(_ fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Swift.Bool
}
public typealias Fileable = RLIMFeedSDK.FileDeletable & RLIMFeedSDK.FileReadable & RLIMFeedSDK.FileWritable
public enum FileError : Swift.Error {
  case unableToCreateDirectory(directory: Swift.String, reason: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class File : ObjectiveC.NSObject {
  public static func write(_ data: Foundation.Data, to fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Foundation.URL
  public static func read(from fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Foundation.Data
  public static func delete(_ fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Swift.Bool
  public static func exists(_ fileURLComponents: RLIMFeedSDK.FileURLComponents) throws -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public struct CustomStickerInput : Apollo.GraphQLMapConvertible {
  public var graphQLMap: Apollo.GraphQLMap
  public init(customStickerId: Apollo.GraphQLID, sequence: Swift.Optional<Swift.Int?> = nil)
  public var customStickerId: Apollo.GraphQLID {
    get
    set
  }
  public var sequence: Swift.Optional<Swift.Int?> {
    get
    set
  }
}
public struct StickerInput : Apollo.GraphQLMapConvertible {
  public var graphQLMap: Apollo.GraphQLMap
  public init(bundleId: Apollo.GraphQLID, sequence: Swift.Optional<Swift.Int?> = nil)
  public var bundleId: Apollo.GraphQLID {
    get
    set
  }
  public var sequence: Swift.Optional<Swift.Int?> {
    get
    set
  }
}
final public class GameBannersQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  public init()
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(gameBanners: [RLIMFeedSDK.GameBannersQuery.Data.GameBanner])
    public var gameBanners: [RLIMFeedSDK.GameBannersQuery.Data.GameBanner] {
      get
      set
    }
    public struct GameBanner : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(bannerId: Apollo.GraphQLID? = nil, bannerUrl: Swift.String? = nil, bannerSequence: Swift.Int? = nil, bannerName: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var bannerId: Apollo.GraphQLID? {
        get
        set
      }
      public var bannerUrl: Swift.String? {
        get
        set
      }
      public var bannerSequence: Swift.Int? {
        get
        set
      }
      public var bannerName: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class FaceUnityByCategoryQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var fu_categories_id: Swift.Int?
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(fu_categories_id: Swift.Int? = nil, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(faceUnityByCategory: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory? = nil)
    public var faceUnityByCategory: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory? {
      get
      set
    }
    public struct FaceUnityByCategory : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.PageInfo, edges: [RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, hasPreviousPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, total: Swift.Int? = nil, count: Swift.Int? = nil, currentPage: Swift.Int? = nil, lastPage: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var hasPreviousPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var total: Swift.Int? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
        public var currentPage: Swift.Int? {
          get
          set
        }
        public var lastPage: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fuBundleId: Apollo.GraphQLID, fuCategoriesId: Swift.Int? = nil, fuBundleIcon: Swift.String? = nil, fuBundleName: Swift.String? = nil, fuBundleDescription: Swift.String? = nil, fuBundleSequence: Swift.Int? = nil, fuIsFree: Swift.Int? = nil, fuIsShow: Swift.Int? = nil, fuIsOfficial: Swift.Int? = nil, fuIsDelete: Swift.Int? = nil, fuDownloadCount: Swift.Int? = nil, fuMaxFace: Swift.Int? = nil, fuFaceDescription: Swift.String? = nil, faceUnityBundleLists: [RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge.Node.FaceUnityBundleList])
          public var __typename: Swift.String {
            get
            set
          }
          public var fuBundleId: Apollo.GraphQLID {
            get
            set
          }
          public var fuCategoriesId: Swift.Int? {
            get
            set
          }
          public var fuBundleIcon: Swift.String? {
            get
            set
          }
          public var fuBundleName: Swift.String? {
            get
            set
          }
          public var fuBundleDescription: Swift.String? {
            get
            set
          }
          public var fuBundleSequence: Swift.Int? {
            get
            set
          }
          public var fuIsFree: Swift.Int? {
            get
            set
          }
          public var fuIsShow: Swift.Int? {
            get
            set
          }
          public var fuIsOfficial: Swift.Int? {
            get
            set
          }
          public var fuIsDelete: Swift.Int? {
            get
            set
          }
          public var fuDownloadCount: Swift.Int? {
            get
            set
          }
          public var fuMaxFace: Swift.Int? {
            get
            set
          }
          public var fuFaceDescription: Swift.String? {
            get
            set
          }
          public var faceUnityBundleLists: [RLIMFeedSDK.FaceUnityByCategoryQuery.Data.FaceUnityByCategory.Edge.Node.FaceUnityBundleList] {
            get
            set
          }
          public struct FaceUnityBundleList : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(fuItemPath: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var fuItemPath: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class FaceUnityQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var fu_bundle_id: Apollo.GraphQLID?
  final public var fu_categories_id: Swift.Int?
  public init(fu_bundle_id: Apollo.GraphQLID? = nil, fu_categories_id: Swift.Int? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(faceUnity: RLIMFeedSDK.FaceUnityQuery.Data.FaceUnity)
    public var faceUnity: RLIMFeedSDK.FaceUnityQuery.Data.FaceUnity {
      get
      set
    }
    public struct FaceUnity : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fuBundleId: Apollo.GraphQLID, fuCategoriesId: Swift.Int? = nil, fuBundleIcon: Swift.String? = nil, fuBundleName: Swift.String? = nil, fuBundleDescription: Swift.String? = nil, fuBundleSequence: Swift.Int? = nil, fuIsFree: Swift.Int? = nil, fuIsShow: Swift.Int? = nil, fuIsOfficial: Swift.Int? = nil, fuIsDelete: Swift.Int? = nil, fuDownloadCount: Swift.Int? = nil, fuMaxFace: Swift.Int? = nil, fuFaceDescription: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var fuBundleId: Apollo.GraphQLID {
        get
        set
      }
      public var fuCategoriesId: Swift.Int? {
        get
        set
      }
      public var fuBundleIcon: Swift.String? {
        get
        set
      }
      public var fuBundleName: Swift.String? {
        get
        set
      }
      public var fuBundleDescription: Swift.String? {
        get
        set
      }
      public var fuBundleSequence: Swift.Int? {
        get
        set
      }
      public var fuIsFree: Swift.Int? {
        get
        set
      }
      public var fuIsShow: Swift.Int? {
        get
        set
      }
      public var fuIsOfficial: Swift.Int? {
        get
        set
      }
      public var fuIsDelete: Swift.Int? {
        get
        set
      }
      public var fuDownloadCount: Swift.Int? {
        get
        set
      }
      public var fuMaxFace: Swift.Int? {
        get
        set
      }
      public var fuFaceDescription: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class FaceUnityCategoriesQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(faceUnityCategories: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory? = nil)
    public var faceUnityCategories: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory? {
      get
      set
    }
    public struct FaceUnityCategory : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.PageInfo, edges: [RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, hasPreviousPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, total: Swift.Int? = nil, count: Swift.Int? = nil, currentPage: Swift.Int? = nil, lastPage: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var hasPreviousPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var total: Swift.Int? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
        public var currentPage: Swift.Int? {
          get
          set
        }
        public var lastPage: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.FaceUnityCategoriesQuery.Data.FaceUnityCategory.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fuCategoriesId: Apollo.GraphQLID, fuCategoriesName: Swift.String? = nil, fuFolderName: Swift.String? = nil, fuIsShow: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var fuCategoriesId: Apollo.GraphQLID {
            get
            set
          }
          public var fuCategoriesName: Swift.String? {
            get
            set
          }
          public var fuFolderName: Swift.String? {
            get
            set
          }
          public var fuIsShow: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class FaceUnityBundleListsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(faceUnityBundleLists: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList? = nil)
    public var faceUnityBundleLists: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList? {
      get
      set
    }
    public struct FaceUnityBundleList : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.PageInfo, edges: [RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, hasPreviousPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, total: Swift.Int? = nil, count: Swift.Int? = nil, currentPage: Swift.Int? = nil, lastPage: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var hasPreviousPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var total: Swift.Int? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
        public var currentPage: Swift.Int? {
          get
          set
        }
        public var lastPage: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.FaceUnityBundleListsQuery.Data.FaceUnityBundleList.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(fuBundleId: Swift.Int? = nil, fuDeviceType: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var fuBundleId: Swift.Int? {
            get
            set
          }
          public var fuDeviceType: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class FaceUnityBundleListQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var fu_bundle_id: Apollo.GraphQLID?
  final public var fu_device_type: Swift.Int?
  public init(fu_bundle_id: Apollo.GraphQLID? = nil, fu_device_type: Swift.Int? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(faceUnityBundleList: RLIMFeedSDK.FaceUnityBundleListQuery.Data.FaceUnityBundleList? = nil)
    public var faceUnityBundleList: RLIMFeedSDK.FaceUnityBundleListQuery.Data.FaceUnityBundleList? {
      get
      set
    }
    public struct FaceUnityBundleList : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fuId: Apollo.GraphQLID, fuBundleId: Swift.Int? = nil, isShow: Swift.Int? = nil, fuName: Swift.String? = nil, fuItemPath: Swift.String? = nil, fuDeviceType: Swift.Int? = nil, fuFileType: Swift.String? = nil, faceUnity: RLIMFeedSDK.FaceUnityBundleListQuery.Data.FaceUnityBundleList.FaceUnity? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var fuId: Apollo.GraphQLID {
        get
        set
      }
      public var fuBundleId: Swift.Int? {
        get
        set
      }
      public var isShow: Swift.Int? {
        get
        set
      }
      public var fuName: Swift.String? {
        get
        set
      }
      public var fuItemPath: Swift.String? {
        get
        set
      }
      public var fuDeviceType: Swift.Int? {
        get
        set
      }
      public var fuFileType: Swift.String? {
        get
        set
      }
      public var faceUnity: RLIMFeedSDK.FaceUnityBundleListQuery.Data.FaceUnityBundleList.FaceUnity? {
        get
        set
      }
      public struct FaceUnity : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(fuBundleId: Apollo.GraphQLID, fuCategoriesId: Swift.Int? = nil, fuBundleIcon: Swift.String? = nil, fuBundleName: Swift.String? = nil, fuBundleDescription: Swift.String? = nil, fuBundleSequence: Swift.Int? = nil, fuIsFree: Swift.Int? = nil, fuIsShow: Swift.Int? = nil, fuIsOfficial: Swift.Int? = nil, fuIsDelete: Swift.Int? = nil, fuDownloadCount: Swift.Int? = nil, fuMaxFace: Swift.Int? = nil, fuFaceDescription: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var fuBundleId: Apollo.GraphQLID {
          get
          set
        }
        public var fuCategoriesId: Swift.Int? {
          get
          set
        }
        public var fuBundleIcon: Swift.String? {
          get
          set
        }
        public var fuBundleName: Swift.String? {
          get
          set
        }
        public var fuBundleDescription: Swift.String? {
          get
          set
        }
        public var fuBundleSequence: Swift.Int? {
          get
          set
        }
        public var fuIsFree: Swift.Int? {
          get
          set
        }
        public var fuIsShow: Swift.Int? {
          get
          set
        }
        public var fuIsOfficial: Swift.Int? {
          get
          set
        }
        public var fuIsDelete: Swift.Int? {
          get
          set
        }
        public var fuDownloadCount: Swift.Int? {
          get
          set
        }
        public var fuMaxFace: Swift.Int? {
          get
          set
        }
        public var fuFaceDescription: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class GamesQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var ios_status: Swift.Int?
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(ios_status: Swift.Int? = nil, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(games: RLIMFeedSDK.GamesQuery.Data.Game? = nil)
    public var games: RLIMFeedSDK.GamesQuery.Data.Game? {
      get
      set
    }
    public struct Game : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.GamesQuery.Data.Game.PageInfo, edges: [RLIMFeedSDK.GamesQuery.Data.Game.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.GamesQuery.Data.Game.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.GamesQuery.Data.Game.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.GamesQuery.Data.Game.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.GamesQuery.Data.Game.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(gameUrl: Swift.String? = nil, gameIcon: Swift.String? = nil, gameName: Swift.String? = nil, gameId: Apollo.GraphQLID? = nil, description: Swift.String? = nil, isOfficial: Swift.Int? = nil, gameSequence: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var gameUrl: Swift.String? {
            get
            set
          }
          public var gameIcon: Swift.String? {
            get
            set
          }
          public var gameName: Swift.String? {
            get
            set
          }
          public var gameId: Apollo.GraphQLID? {
            get
            set
          }
          public var description: Swift.String? {
            get
            set
          }
          public var isOfficial: Swift.Int? {
            get
            set
          }
          public var gameSequence: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class UsersQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  public init()
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(user: RLIMFeedSDK.UsersQuery.Data.User? = nil)
    public var user: RLIMFeedSDK.UsersQuery.Data.User? {
      get
      set
    }
    public struct User : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, username: Swift.String? = nil, sex: Swift.Int? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var username: Swift.String? {
        get
        set
      }
      public var sex: Swift.Int? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class StickerQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var queryDocument: Swift.String {
    get
  }
  final public var bundle_id: Apollo.GraphQLID?
  public init(bundle_id: Apollo.GraphQLID? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(sticker: RLIMFeedSDK.StickerQuery.Data.Sticker? = nil)
    public var sticker: RLIMFeedSDK.StickerQuery.Data.Sticker? {
      get
      set
    }
    public struct Sticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public var __typename: Swift.String {
        get
        set
      }
      public var artist: RLIMFeedSDK.StickerQuery.Data.Sticker.Artist? {
        get
        set
      }
      public var artistId: Swift.Int {
        get
        set
      }
      public var stickerLists: [RLIMFeedSDK.StickerQuery.Data.Sticker.StickerList?]? {
        get
        set
      }
      public var contest: RLIMFeedSDK.StickerQuery.Data.Sticker.Contest? {
        get
        set
      }
      public var fragments: RLIMFeedSDK.StickerQuery.Data.Sticker.Fragments {
        get
        set
      }
      public struct Fragments {
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var bundleInfo: RLIMFeedSDK.BundleInfo {
          get
          set
        }
      }
      public struct Artist : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public var __typename: Swift.String {
          get
          set
        }
        public var user: RLIMFeedSDK.StickerQuery.Data.Sticker.Artist.User? {
          get
          set
        }
        public var fragments: RLIMFeedSDK.StickerQuery.Data.Sticker.Artist.Fragments {
          get
          set
        }
        public struct Fragments {
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public var artistInfo: RLIMFeedSDK.ArtistInfo {
            get
            set
          }
        }
        public struct User : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, username: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var username: Swift.String? {
            get
            set
          }
        }
      }
      public struct StickerList : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(stickerId: Apollo.GraphQLID? = nil, stickerIcon: Swift.String? = nil, sitckerName: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var stickerId: Apollo.GraphQLID? {
          get
          set
        }
        public var stickerIcon: Swift.String? {
          get
          set
        }
        public var sitckerName: Swift.String? {
          get
          set
        }
      }
      public struct Contest : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(pageIcon: Swift.String? = nil, pageUrl: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var pageIcon: Swift.String? {
          get
          set
        }
        public var pageUrl: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class StickerArtistQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var artist_id: Apollo.GraphQLID
  final public var count: Swift.Int
  final public var page: Swift.Int
  public init(artist_id: Apollo.GraphQLID, count: Swift.Int, page: Swift.Int)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(stickerArtist: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist? = nil)
    public var stickerArtist: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist? {
      get
      set
    }
    public struct StickerArtist : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(artistId: Apollo.GraphQLID, artistName: Swift.String, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil, uid: Swift.Int? = nil, hideViewMoment: Swift.Bool? = nil, stickers: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var artistId: Apollo.GraphQLID {
        get
        set
      }
      public var artistName: Swift.String {
        get
        set
      }
      public var description: Swift.String? {
        get
        set
      }
      public var icon: Swift.String? {
        get
        set
      }
      public var banner: Swift.String? {
        get
        set
      }
      public var uid: Swift.Int? {
        get
        set
      }
      public var hideViewMoment: Swift.Bool? {
        get
        set
      }
      public var stickers: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker? {
        get
        set
      }
      public struct Sticker : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(paginatorInfo: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.PaginatorInfo, data: [RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.Datum])
        public var __typename: Swift.String {
          get
          set
        }
        public var paginatorInfo: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.PaginatorInfo {
          get
          set
        }
        public var data: [RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.Datum] {
          get
          set
        }
        public struct PaginatorInfo : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(total: Swift.Int, currentPage: Swift.Int, hasMorePages: Swift.Bool, perPage: Swift.Int)
          public var __typename: Swift.String {
            get
            set
          }
          public var total: Swift.Int {
            get
            set
          }
          public var currentPage: Swift.Int {
            get
            set
          }
          public var hasMorePages: Swift.Bool {
            get
            set
          }
          public var perPage: Swift.Int {
            get
            set
          }
        }
        public struct Datum : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil, description: Swift.String? = nil, bannerUrl: Swift.String? = nil, isGif: Swift.Int? = nil, isOfficial: Swift.Int? = nil, status: Swift.Int? = nil, downloadCount: Swift.Int? = nil, artistId: Swift.Int, artist: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.Datum.Artist? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var bundleId: Apollo.GraphQLID {
            get
            set
          }
          public var bundleIcon: Swift.String? {
            get
            set
          }
          public var bundleName: Swift.String? {
            get
            set
          }
          public var description: Swift.String? {
            get
            set
          }
          public var bannerUrl: Swift.String? {
            get
            set
          }
          public var isGif: Swift.Int? {
            get
            set
          }
          public var isOfficial: Swift.Int? {
            get
            set
          }
          public var status: Swift.Int? {
            get
            set
          }
          public var downloadCount: Swift.Int? {
            get
            set
          }
          public var artistId: Swift.Int {
            get
            set
          }
          public var artist: RLIMFeedSDK.StickerArtistQuery.Data.StickerArtist.Sticker.Datum.Artist? {
            get
            set
          }
          public struct Artist : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(artistName: Swift.String, artistId: Apollo.GraphQLID, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var artistName: Swift.String {
              get
              set
            }
            public var artistId: Apollo.GraphQLID {
              get
              set
            }
            public var description: Swift.String? {
              get
              set
            }
            public var icon: Swift.String? {
              get
              set
            }
            public var banner: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class StickersQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var filter_type: Swift.String?
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(filter_type: Swift.String? = nil, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(stickers: RLIMFeedSDK.StickersQuery.Data.Sticker? = nil)
    public var stickers: RLIMFeedSDK.StickersQuery.Data.Sticker? {
      get
      set
    }
    public struct Sticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.StickersQuery.Data.Sticker.PageInfo, edges: [RLIMFeedSDK.StickersQuery.Data.Sticker.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.StickersQuery.Data.Sticker.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.StickersQuery.Data.Sticker.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.StickersQuery.Data.Sticker.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.StickersQuery.Data.Sticker.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil, description: Swift.String? = nil, bannerUrl: Swift.String? = nil, isGif: Swift.Int? = nil, isOfficial: Swift.Int? = nil, status: Swift.Int? = nil, downloadCount: Swift.Int? = nil, artistId: Swift.Int, artist: RLIMFeedSDK.StickersQuery.Data.Sticker.Edge.Node.Artist? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var bundleId: Apollo.GraphQLID {
            get
            set
          }
          public var bundleIcon: Swift.String? {
            get
            set
          }
          public var bundleName: Swift.String? {
            get
            set
          }
          public var description: Swift.String? {
            get
            set
          }
          public var bannerUrl: Swift.String? {
            get
            set
          }
          public var isGif: Swift.Int? {
            get
            set
          }
          public var isOfficial: Swift.Int? {
            get
            set
          }
          public var status: Swift.Int? {
            get
            set
          }
          public var downloadCount: Swift.Int? {
            get
            set
          }
          public var artistId: Swift.Int {
            get
            set
          }
          public var artist: RLIMFeedSDK.StickersQuery.Data.Sticker.Edge.Node.Artist? {
            get
            set
          }
          public struct Artist : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(artistName: Swift.String, artistId: Apollo.GraphQLID, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var artistName: Swift.String {
              get
              set
            }
            public var artistId: Apollo.GraphQLID {
              get
              set
            }
            public var description: Swift.String? {
              get
              set
            }
            public var icon: Swift.String? {
              get
              set
            }
            public var banner: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class StickerSearchQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var bundle_name: Swift.String?
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(bundle_name: Swift.String? = nil, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(stickerSearch: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch? = nil)
    public var stickerSearch: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch? {
      get
      set
    }
    public struct StickerSearch : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.PageInfo, edges: [RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, endCursor: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil, description: Swift.String? = nil, bannerUrl: Swift.String? = nil, isGif: Swift.Int? = nil, isOfficial: Swift.Int? = nil, status: Swift.Int? = nil, downloadCount: Swift.Int? = nil, artistId: Swift.Int, artist: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge.Node.Artist? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var bundleId: Apollo.GraphQLID {
            get
            set
          }
          public var bundleIcon: Swift.String? {
            get
            set
          }
          public var bundleName: Swift.String? {
            get
            set
          }
          public var description: Swift.String? {
            get
            set
          }
          public var bannerUrl: Swift.String? {
            get
            set
          }
          public var isGif: Swift.Int? {
            get
            set
          }
          public var isOfficial: Swift.Int? {
            get
            set
          }
          public var status: Swift.Int? {
            get
            set
          }
          public var downloadCount: Swift.Int? {
            get
            set
          }
          public var artistId: Swift.Int {
            get
            set
          }
          public var artist: RLIMFeedSDK.StickerSearchQuery.Data.StickerSearch.Edge.Node.Artist? {
            get
            set
          }
          public struct Artist : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(artistName: Swift.String, artistId: Apollo.GraphQLID, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var artistName: Swift.String {
              get
              set
            }
            public var artistId: Apollo.GraphQLID {
              get
              set
            }
            public var description: Swift.String? {
              get
              set
            }
            public var icon: Swift.String? {
              get
              set
            }
            public var banner: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class ArtistSearchQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var artist_name: Swift.String?
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(artist_name: Swift.String? = nil, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(artistSearch: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch? = nil)
    public var artistSearch: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch? {
      get
      set
    }
    public struct ArtistSearch : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.PageInfo, edges: [RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, endCursor: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(artistId: Apollo.GraphQLID, artistName: Swift.String, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil, uid: Swift.Int? = nil, hideViewMoment: Swift.Bool? = nil, stickerSet: Swift.Int, user: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge.Node.User? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var artistId: Apollo.GraphQLID {
            get
            set
          }
          public var artistName: Swift.String {
            get
            set
          }
          public var description: Swift.String? {
            get
            set
          }
          public var icon: Swift.String? {
            get
            set
          }
          public var banner: Swift.String? {
            get
            set
          }
          public var uid: Swift.Int? {
            get
            set
          }
          public var hideViewMoment: Swift.Bool? {
            get
            set
          }
          public var stickerSet: Swift.Int {
            get
            set
          }
          public var user: RLIMFeedSDK.ArtistSearchQuery.Data.ArtistSearch.Edge.Node.User? {
            get
            set
          }
          public struct User : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, username: Swift.String? = nil, name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var username: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var phone: Swift.String? {
              get
              set
            }
            public var email: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class StickerListsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(stickerLists: RLIMFeedSDK.StickerListsQuery.Data.StickerList? = nil)
    public var stickerLists: RLIMFeedSDK.StickerListsQuery.Data.StickerList? {
      get
      set
    }
    public struct StickerList : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.StickerListsQuery.Data.StickerList.PageInfo, edges: [RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.StickerListsQuery.Data.StickerList.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(stickerId: Apollo.GraphQLID? = nil, bundleId: Swift.Int, stickerIcon: Swift.String? = nil, sitckerName: Swift.String? = nil, sticker: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node.Sticker? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var stickerId: Apollo.GraphQLID? {
            get
            set
          }
          public var bundleId: Swift.Int {
            get
            set
          }
          public var stickerIcon: Swift.String? {
            get
            set
          }
          public var sitckerName: Swift.String? {
            get
            set
          }
          public var sticker: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node.Sticker? {
            get
            set
          }
          public struct Sticker : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(description: Swift.String? = nil, bannerUrl: Swift.String? = nil, isGif: Swift.Int? = nil, isOfficial: Swift.Int? = nil, status: Swift.Int? = nil, downloadCount: Swift.Int? = nil, bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, artist: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node.Sticker.Artist? = nil, artistId: Swift.Int)
            public var __typename: Swift.String {
              get
              set
            }
            public var description: Swift.String? {
              get
              set
            }
            public var bannerUrl: Swift.String? {
              get
              set
            }
            public var isGif: Swift.Int? {
              get
              set
            }
            public var isOfficial: Swift.Int? {
              get
              set
            }
            public var status: Swift.Int? {
              get
              set
            }
            public var downloadCount: Swift.Int? {
              get
              set
            }
            public var bundleId: Apollo.GraphQLID {
              get
              set
            }
            public var bundleIcon: Swift.String? {
              get
              set
            }
            public var artist: RLIMFeedSDK.StickerListsQuery.Data.StickerList.Edge.Node.Sticker.Artist? {
              get
              set
            }
            public var artistId: Swift.Int {
              get
              set
            }
            public struct Artist : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static let selections: [any Apollo.GraphQLSelection]
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(artistName: Swift.String, artistId: Apollo.GraphQLID, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil)
              public var __typename: Swift.String {
                get
                set
              }
              public var artistName: Swift.String {
                get
                set
              }
              public var artistId: Apollo.GraphQLID {
                get
                set
              }
              public var description: Swift.String? {
                get
                set
              }
              public var icon: Swift.String? {
                get
                set
              }
              public var banner: Swift.String? {
                get
                set
              }
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class MyStickersQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  public init()
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(user: RLIMFeedSDK.MyStickersQuery.Data.User? = nil)
    public var user: RLIMFeedSDK.MyStickersQuery.Data.User? {
      get
      set
    }
    public struct User : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, username: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, bio: Swift.String? = nil, avatar: Swift.String? = nil, sex: Swift.Int? = nil, stickers: [RLIMFeedSDK.MyStickersQuery.Data.User.Sticker])
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var username: Swift.String? {
        get
        set
      }
      public var phone: Swift.String? {
        get
        set
      }
      public var email: Swift.String? {
        get
        set
      }
      public var bio: Swift.String? {
        get
        set
      }
      public var avatar: Swift.String? {
        get
        set
      }
      public var sex: Swift.Int? {
        get
        set
      }
      public var stickers: [RLIMFeedSDK.MyStickersQuery.Data.User.Sticker] {
        get
        set
      }
      public struct Sticker : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var bundleId: Apollo.GraphQLID {
          get
          set
        }
        public var bundleIcon: Swift.String? {
          get
          set
        }
        public var bundleName: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class DownloadStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var bundleId: Apollo.GraphQLID
  public init(bundleId: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(downloadSticker: RLIMFeedSDK.DownloadStickerMutation.Data.DownloadSticker? = nil)
    public var downloadSticker: RLIMFeedSDK.DownloadStickerMutation.Data.DownloadSticker? {
      get
      set
    }
    public struct DownloadSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil, stickerLists: [RLIMFeedSDK.DownloadStickerMutation.Data.DownloadSticker.StickerList?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var bundleId: Apollo.GraphQLID {
        get
        set
      }
      public var bundleIcon: Swift.String? {
        get
        set
      }
      public var bundleName: Swift.String? {
        get
        set
      }
      public var stickerLists: [RLIMFeedSDK.DownloadStickerMutation.Data.DownloadSticker.StickerList?]? {
        get
        set
      }
      public struct StickerList : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(bundleId: Swift.Int, stickerIcon: Swift.String? = nil, sitckerName: Swift.String? = nil, stickerId: Apollo.GraphQLID? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var bundleId: Swift.Int {
          get
          set
        }
        public var stickerIcon: Swift.String? {
          get
          set
        }
        public var sitckerName: Swift.String? {
          get
          set
        }
        public var stickerId: Apollo.GraphQLID? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class RemoveStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var bundleId: Apollo.GraphQLID
  public init(bundleId: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeSticker: RLIMFeedSDK.RemoveStickerMutation.Data.RemoveSticker? = nil)
    public var removeSticker: RLIMFeedSDK.RemoveStickerMutation.Data.RemoveSticker? {
      get
      set
    }
    public struct RemoveSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(bundleId: Apollo.GraphQLID)
      public var __typename: Swift.String {
        get
        set
      }
      public var bundleId: Apollo.GraphQLID {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class DownloadFaceUnityMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var fu_bundle_Id: Apollo.GraphQLID
  public init(fu_bundle_Id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(downloadFaceUnity: RLIMFeedSDK.DownloadFaceUnityMutation.Data.DownloadFaceUnity? = nil)
    public var downloadFaceUnity: RLIMFeedSDK.DownloadFaceUnityMutation.Data.DownloadFaceUnity? {
      get
      set
    }
    public struct DownloadFaceUnity : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fuId: Apollo.GraphQLID, fuBundleId: Swift.Int? = nil, isShow: Swift.Int? = nil, fuName: Swift.String? = nil, fuItemPath: Swift.String? = nil, fuDeviceType: Swift.Int? = nil, fuFileType: Swift.String? = nil, faceUnity: RLIMFeedSDK.DownloadFaceUnityMutation.Data.DownloadFaceUnity.FaceUnity? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var fuId: Apollo.GraphQLID {
        get
        set
      }
      public var fuBundleId: Swift.Int? {
        get
        set
      }
      public var isShow: Swift.Int? {
        get
        set
      }
      public var fuName: Swift.String? {
        get
        set
      }
      public var fuItemPath: Swift.String? {
        get
        set
      }
      public var fuDeviceType: Swift.Int? {
        get
        set
      }
      public var fuFileType: Swift.String? {
        get
        set
      }
      public var faceUnity: RLIMFeedSDK.DownloadFaceUnityMutation.Data.DownloadFaceUnity.FaceUnity? {
        get
        set
      }
      public struct FaceUnity : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(fuBundleId: Apollo.GraphQLID, fuCategoriesId: Swift.Int? = nil, fuBundleIcon: Swift.String? = nil, fuBundleName: Swift.String? = nil, fuBundleDescription: Swift.String? = nil, fuBundleSequence: Swift.Int? = nil, fuIsFree: Swift.Int? = nil, fuIsShow: Swift.Int? = nil, fuIsOfficial: Swift.Int? = nil, fuIsDelete: Swift.Int? = nil, fuDownloadCount: Swift.Int? = nil, fuMaxFace: Swift.Int? = nil, fuFaceDescription: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var fuBundleId: Apollo.GraphQLID {
          get
          set
        }
        public var fuCategoriesId: Swift.Int? {
          get
          set
        }
        public var fuBundleIcon: Swift.String? {
          get
          set
        }
        public var fuBundleName: Swift.String? {
          get
          set
        }
        public var fuBundleDescription: Swift.String? {
          get
          set
        }
        public var fuBundleSequence: Swift.Int? {
          get
          set
        }
        public var fuIsFree: Swift.Int? {
          get
          set
        }
        public var fuIsShow: Swift.Int? {
          get
          set
        }
        public var fuIsOfficial: Swift.Int? {
          get
          set
        }
        public var fuIsDelete: Swift.Int? {
          get
          set
        }
        public var fuDownloadCount: Swift.Int? {
          get
          set
        }
        public var fuMaxFace: Swift.Int? {
          get
          set
        }
        public var fuFaceDescription: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class RemoveFaceUnityMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var fu_bundle_Id: Apollo.GraphQLID
  public init(fu_bundle_Id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeFaceUnity: RLIMFeedSDK.RemoveFaceUnityMutation.Data.RemoveFaceUnity? = nil)
    public var removeFaceUnity: RLIMFeedSDK.RemoveFaceUnityMutation.Data.RemoveFaceUnity? {
      get
      set
    }
    public struct RemoveFaceUnity : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(fuBundleId: Apollo.GraphQLID, fuCategoriesId: Swift.Int? = nil, fuBundleIcon: Swift.String? = nil, fuBundleName: Swift.String? = nil, fuBundleDescription: Swift.String? = nil, fuBundleSequence: Swift.Int? = nil, fuIsFree: Swift.Int? = nil, fuIsShow: Swift.Int? = nil, fuIsOfficial: Swift.Int? = nil, fuIsDelete: Swift.Int? = nil, fuDownloadCount: Swift.Int? = nil, fuMaxFace: Swift.Int? = nil, fuFaceDescription: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var fuBundleId: Apollo.GraphQLID {
        get
        set
      }
      public var fuCategoriesId: Swift.Int? {
        get
        set
      }
      public var fuBundleIcon: Swift.String? {
        get
        set
      }
      public var fuBundleName: Swift.String? {
        get
        set
      }
      public var fuBundleDescription: Swift.String? {
        get
        set
      }
      public var fuBundleSequence: Swift.Int? {
        get
        set
      }
      public var fuIsFree: Swift.Int? {
        get
        set
      }
      public var fuIsShow: Swift.Int? {
        get
        set
      }
      public var fuIsOfficial: Swift.Int? {
        get
        set
      }
      public var fuIsDelete: Swift.Int? {
        get
        set
      }
      public var fuDownloadCount: Swift.Int? {
        get
        set
      }
      public var fuMaxFace: Swift.Int? {
        get
        set
      }
      public var fuFaceDescription: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class FetchRemarksQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var owner_id: Swift.Int
  public init(owner_id: Swift.Int)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(fetchRemarks: [RLIMFeedSDK.FetchRemarksQuery.Data.FetchRemark])
    public var fetchRemarks: [RLIMFeedSDK.FetchRemarksQuery.Data.FetchRemark] {
      get
      set
    }
    public struct FetchRemark : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(targetId: Swift.Int? = nil, targetUsername: Swift.String? = nil, remarkName: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var targetId: Swift.Int? {
        get
        set
      }
      public var targetUsername: Swift.String? {
        get
        set
      }
      public var remarkName: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class InsertUpdateUserRemarkMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var target_id: Swift.Int
  final public var target_username: Swift.String
  final public var remark_name: Swift.String
  public init(target_id: Swift.Int, target_username: Swift.String, remark_name: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(insertUpdateUserRemark: RLIMFeedSDK.InsertUpdateUserRemarkMutation.Data.InsertUpdateUserRemark? = nil)
    public var insertUpdateUserRemark: RLIMFeedSDK.InsertUpdateUserRemarkMutation.Data.InsertUpdateUserRemark? {
      get
      set
    }
    public struct InsertUpdateUserRemark : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(ownerId: Swift.Int? = nil, targetId: Swift.Int? = nil, targetUsername: Swift.String? = nil, remarkName: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var ownerId: Swift.Int? {
        get
        set
      }
      public var targetId: Swift.Int? {
        get
        set
      }
      public var targetUsername: Swift.String? {
        get
        set
      }
      public var remarkName: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class RemoveUserRemarkMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var target_id: Swift.Int
  public init(target_id: Swift.Int)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeRemark: RLIMFeedSDK.RemoveUserRemarkMutation.Data.RemoveRemark? = nil)
    public var removeRemark: RLIMFeedSDK.RemoveUserRemarkMutation.Data.RemoveRemark? {
      get
      set
    }
    public struct RemoveRemark : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(ownerId: Swift.Int? = nil, targetId: Swift.Int? = nil, targetUsername: Swift.String? = nil, remarkName: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var ownerId: Swift.Int? {
        get
        set
      }
      public var targetId: Swift.Int? {
        get
        set
      }
      public var targetUsername: Swift.String? {
        get
        set
      }
      public var remarkName: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class BytedEffectSoundQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(bytedEffectSound: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound? = nil)
    public var bytedEffectSound: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound? {
      get
      set
    }
    public struct BytedEffectSound : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.PageInfo, edges: [RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.BytedEffectSoundQuery.Data.BytedEffectSound.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, fileUrl: Swift.String? = nil, coverUrl: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var fileUrl: Swift.String? {
            get
            set
          }
          public var coverUrl: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class BytedEffectCategoriesQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(bytedEffectCategories: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory? = nil)
    public var bytedEffectCategories: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory? {
      get
      set
    }
    public struct BytedEffectCategory : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.PageInfo, edges: [RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.BytedEffectCategoriesQuery.Data.BytedEffectCategory.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, sequence: Swift.Int? = nil, translationKey: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var sequence: Swift.Int? {
            get
            set
          }
          public var translationKey: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class BytedEffectByCategoryQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var category_id: Swift.Int
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(category_id: Swift.Int, first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(bytedEffectByCategory: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory? = nil)
    public var bytedEffectByCategory: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory? {
      get
      set
    }
    public struct BytedEffectByCategory : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.PageInfo, edges: [RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool, startCursor: Swift.String? = nil, endCursor: Swift.String? = nil, count: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
        public var startCursor: Swift.String? {
          get
          set
        }
        public var endCursor: Swift.String? {
          get
          set
        }
        public var count: Swift.Int? {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, iconUrl: Swift.String? = nil, sequence: Swift.Int? = nil, categoryId: Swift.Int? = nil, bundle: [RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge.Node.Bundle])
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var iconUrl: Swift.String? {
            get
            set
          }
          public var sequence: Swift.Int? {
            get
            set
          }
          public var categoryId: Swift.Int? {
            get
            set
          }
          public var bundle: [RLIMFeedSDK.BytedEffectByCategoryQuery.Data.BytedEffectByCategory.Edge.Node.Bundle] {
            get
            set
          }
          public struct Bundle : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static let selections: [any Apollo.GraphQLSelection]
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, bundleId: Swift.Int? = nil, name: Swift.String? = nil, bundleUrl: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var bundleId: Swift.Int? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var bundleUrl: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class FetchCustomStickersQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public var first: Swift.Int
  final public var after: Swift.String?
  public init(first: Swift.Int, after: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(fetchCustomStickers: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker? = nil)
    public var fetchCustomStickers: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker? {
      get
      set
    }
    public struct FetchCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pageInfo: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.PageInfo, edges: [RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pageInfo: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.PageInfo {
        get
        set
      }
      public var edges: [RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.Edge?]? {
        get
        set
      }
      public struct PageInfo : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(hasNextPage: Swift.Bool)
        public var __typename: Swift.String {
          get
          set
        }
        public var hasNextPage: Swift.Bool {
          get
          set
        }
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.Edge.Node? = nil, cursor: Swift.String)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: RLIMFeedSDK.FetchCustomStickersQuery.Data.FetchCustomSticker.Edge.Node? {
          get
          set
        }
        public var cursor: Swift.String {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static let selections: [any Apollo.GraphQLSelection]
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(customStickerId: Apollo.GraphQLID, stickerUrl: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var customStickerId: Apollo.GraphQLID {
            get
            set
          }
          public var stickerUrl: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class DownloadCustomStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var custom_sticker_id: Apollo.GraphQLID
  public init(custom_sticker_id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(downloadCustomSticker: RLIMFeedSDK.DownloadCustomStickerMutation.Data.DownloadCustomSticker? = nil)
    public var downloadCustomSticker: RLIMFeedSDK.DownloadCustomStickerMutation.Data.DownloadCustomSticker? {
      get
      set
    }
    public struct DownloadCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(customStickerId: Apollo.GraphQLID, stickerUrl: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var customStickerId: Apollo.GraphQLID {
        get
        set
      }
      public var stickerUrl: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class RemoveCustomStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var custom_sticker_id: Apollo.GraphQLID
  public init(custom_sticker_id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeCustomSticker: RLIMFeedSDK.RemoveCustomStickerMutation.Data.RemoveCustomSticker? = nil)
    public var removeCustomSticker: RLIMFeedSDK.RemoveCustomStickerMutation.Data.RemoveCustomSticker? {
      get
      set
    }
    public struct RemoveCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(customStickerId: Apollo.GraphQLID, stickerUrl: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var customStickerId: Apollo.GraphQLID {
        get
        set
      }
      public var stickerUrl: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class UploadCustomStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var file: Swift.String
  public init(file: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(uploadCustomSticker: RLIMFeedSDK.UploadCustomStickerMutation.Data.UploadCustomSticker? = nil)
    public var uploadCustomSticker: RLIMFeedSDK.UploadCustomStickerMutation.Data.UploadCustomSticker? {
      get
      set
    }
    public struct UploadCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(customStickerId: Apollo.GraphQLID, stickerUrl: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var customStickerId: Apollo.GraphQLID {
        get
        set
      }
      public var stickerUrl: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class RemoveCustomStickersMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var custom_sticker_ids: [Apollo.GraphQLID]?
  public init(custom_sticker_ids: [Apollo.GraphQLID]?)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeCustomStickers: [RLIMFeedSDK.RemoveCustomStickersMutation.Data.RemoveCustomSticker])
    public var removeCustomStickers: [RLIMFeedSDK.RemoveCustomStickersMutation.Data.RemoveCustomSticker] {
      get
      set
    }
    public struct RemoveCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(customStickerId: Apollo.GraphQLID)
      public var __typename: Swift.String {
        get
        set
      }
      public var customStickerId: Apollo.GraphQLID {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class RemoveStickersMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var bundle_ids: [Apollo.GraphQLID]?
  public init(bundle_ids: [Apollo.GraphQLID]?)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeStickers: [RLIMFeedSDK.RemoveStickersMutation.Data.RemoveSticker])
    public var removeStickers: [RLIMFeedSDK.RemoveStickersMutation.Data.RemoveSticker] {
      get
      set
    }
    public struct RemoveSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(bundleId: Apollo.GraphQLID)
      public var __typename: Swift.String {
        get
        set
      }
      public var bundleId: Apollo.GraphQLID {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class SortCustomStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var custom_stickers: [RLIMFeedSDK.CustomStickerInput]?
  public init(custom_stickers: [RLIMFeedSDK.CustomStickerInput]?)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(sortCustomSticker: [RLIMFeedSDK.SortCustomStickerMutation.Data.SortCustomSticker])
    public var sortCustomSticker: [RLIMFeedSDK.SortCustomStickerMutation.Data.SortCustomSticker] {
      get
      set
    }
    public struct SortCustomSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(customStickerId: Apollo.GraphQLID, pivot: RLIMFeedSDK.SortCustomStickerMutation.Data.SortCustomSticker.Pivot? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var customStickerId: Apollo.GraphQLID {
        get
        set
      }
      public var pivot: RLIMFeedSDK.SortCustomStickerMutation.Data.SortCustomSticker.Pivot? {
        get
        set
      }
      public struct Pivot : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(sequence: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var sequence: Swift.Int? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class SortStickerMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public var stickers: [RLIMFeedSDK.StickerInput]?
  public init(stickers: [RLIMFeedSDK.StickerInput]?)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static let selections: [any Apollo.GraphQLSelection]
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(sortSticker: [RLIMFeedSDK.SortStickerMutation.Data.SortSticker])
    public var sortSticker: [RLIMFeedSDK.SortStickerMutation.Data.SortSticker] {
      get
      set
    }
    public struct SortSticker : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static let selections: [any Apollo.GraphQLSelection]
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(bundleId: Apollo.GraphQLID, pivot: RLIMFeedSDK.SortStickerMutation.Data.SortSticker.Pivot? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var bundleId: Apollo.GraphQLID {
        get
        set
      }
      public var pivot: RLIMFeedSDK.SortStickerMutation.Data.SortSticker.Pivot? {
        get
        set
      }
      public struct Pivot : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static let selections: [any Apollo.GraphQLSelection]
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(sequence: Swift.Int? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var sequence: Swift.Int? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
public struct BundleInfo : Apollo.GraphQLFragment {
  public static let fragmentDefinition: Swift.String
  public static let possibleTypes: [Swift.String]
  public static let selections: [any Apollo.GraphQLSelection]
  public var resultMap: Apollo.ResultMap {
    get
  }
  public init(unsafeResultMap: Apollo.ResultMap)
  public init(bundleId: Apollo.GraphQLID, bundleIcon: Swift.String? = nil, bundleName: Swift.String? = nil, bannerUrl: Swift.String? = nil, description: Swift.String? = nil, isGif: Swift.Int? = nil)
  public var __typename: Swift.String {
    get
    set
  }
  public var bundleId: Apollo.GraphQLID {
    get
    set
  }
  public var bundleIcon: Swift.String? {
    get
    set
  }
  public var bundleName: Swift.String? {
    get
    set
  }
  public var bannerUrl: Swift.String? {
    get
    set
  }
  public var description: Swift.String? {
    get
    set
  }
  public var isGif: Swift.Int? {
    get
    set
  }
}
public struct ArtistInfo : Apollo.GraphQLFragment {
  public static let fragmentDefinition: Swift.String
  public static let possibleTypes: [Swift.String]
  public static let selections: [any Apollo.GraphQLSelection]
  public var resultMap: Apollo.ResultMap {
    get
  }
  public init(unsafeResultMap: Apollo.ResultMap)
  public init(artistId: Apollo.GraphQLID, artistName: Swift.String, description: Swift.String? = nil, icon: Swift.String? = nil, banner: Swift.String? = nil, uid: Swift.Int? = nil)
  public var __typename: Swift.String {
    get
    set
  }
  public var artistId: Apollo.GraphQLID {
    get
    set
  }
  public var artistName: Swift.String {
    get
    set
  }
  public var description: Swift.String? {
    get
    set
  }
  public var icon: Swift.String? {
    get
    set
  }
  public var banner: Swift.String? {
    get
    set
  }
  public var uid: Swift.Int? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class RealDog : ObjectiveC.NSObject {
  final public let aa: SDWebImage.SDWebImageManager
  public func initOAuth()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LineSpinFadeLoader : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SwiftyUserDefaults.DefaultsKeys {
  public var lastMigratedVersion: SwiftyUserDefaults.DefaultsKey<Swift.String?> {
    get
  }
  public var apiToken: SwiftyUserDefaults.DefaultsKey<Swift.String?> {
    get
  }
  public var serverConfig: SwiftyUserDefaults.DefaultsKey<RLIMFeedSDK.ServerConfig?> {
    get
  }
  public var currentUser: SwiftyUserDefaults.DefaultsKey<RLIMFeedSDK.TSUser?> {
    get
  }
  public var appInfo: SwiftyUserDefaults.DefaultsKey<RLIMFeedSDK.AppInfo?> {
    get
  }
  public var featureFlags: SwiftyUserDefaults.DefaultsKey<RLIMFeedSDK.FeatureFlags?> {
    get
  }
  public var globalChatWallpaperImage: SwiftyUserDefaults.DefaultsKey<Foundation.Data?> {
    get
  }
  public var currentLanguage: SwiftyUserDefaults.DefaultsKey<Swift.String?> {
    get
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AVAssetTimeSelector : UIKit.UIView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public var thumbnailSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxDuration: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var asset: AVFoundation.AVAsset? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func regenerateThumbnails()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GradientButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Country : Swift.Equatable {
  public var name: Swift.String?
  public var phoneCode: Swift.String?
  public var flagImage: UIKit.UIImage?
  public var isoCode: Swift.String?
  public static var all: [RLIMFeedSDK.Country] {
    get
  }
  public static var `default`: RLIMFeedSDK.Country {
    get
  }
  public init?(isoCode: Swift.String)
  public init?(phoneCode: Swift.String)
  public static func == (lhs: RLIMFeedSDK.Country, rhs: RLIMFeedSDK.Country) -> Swift.Bool
}
extension Swift.Bool {
  public init(value: Swift.String)
}
public protocol IndicatorProtocol {
  var radius: CoreFoundation.CGFloat { get set }
  var color: UIKit.UIColor { get set }
  var isAnimating: Swift.Bool { get }
  func startAnimating()
  func stopAnimating()
  func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
}
final public class Throttle<Argument> {
  public typealias ThrottleAction = (Argument) -> Swift.Void
  public init(interval: Foundation.TimeInterval, action: @escaping RLIMFeedSDK.Throttle<Argument>.ThrottleAction)
  final public func schedule(with value: Argument)
  final public func cancel()
  final public func fire(with value: Argument)
  @objc deinit
}
public struct RewardModel : ObjectMapper.Mappable {
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AppFonts : ObjectiveC.NSObject {
  public enum Body {
    case regular12, regular14, regular16
    public var font: UIKit.UIFont {
      get
    }
    public static func == (a: RLIMFeedSDK.AppFonts.Body, b: RLIMFeedSDK.AppFonts.Body) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Headline {
    case medium10, bold12, medium14, medium16, medium18, bold18
    public var font: UIKit.UIFont {
      get
    }
    public static func == (a: RLIMFeedSDK.AppFonts.Headline, b: RLIMFeedSDK.AppFonts.Headline) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Tag {
    case medium10, medium12, bold16, bold20
    public var font: UIKit.UIFont {
      get
    }
    public static func == (a: RLIMFeedSDK.AppFonts.Tag, b: RLIMFeedSDK.AppFonts.Tag) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LBIndicator : UIKit.UIView, RLIMFeedSDK.IndicatorProtocol {
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var radius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) convenience public init(radius: CoreFoundation.CGFloat = 18.0, color: UIKit.UIColor = .gray)
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @_Concurrency.MainActor(unsafe) open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BallPulseIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PopupDialogManager : ObjectiveC.NSObject {
  @objc public static func presentEnterPasswordDialog(viewController: UIKit.UIViewController, animated: Swift.Bool, completion: RLIMFeedSDK.DidEnterPasswordClosure?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MaterialLoadingIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open var color: UIKit.UIColor {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(radius: CoreFoundation.CGFloat = 18.0, color: UIKit.UIColor = .gray)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func startAnimating()
  @_Concurrency.MainActor(unsafe) override open func stopAnimating()
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(services: any RLIMFeedSDK.ServicesType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias LBCallback = (() -> Swift.Void)?
extension UIKit.UIColor {
  public func RGBtoCMYK(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat) -> (cyan: CoreFoundation.CGFloat, magenta: CoreFoundation.CGFloat, yellow: CoreFoundation.CGFloat, key: CoreFoundation.CGFloat)
  public func CMYKtoRGB(cyan: CoreFoundation.CGFloat, magenta: CoreFoundation.CGFloat, yellow: CoreFoundation.CGFloat, key: CoreFoundation.CGFloat) -> (red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat)
  public func getColorTint() -> UIKit.UIColor
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) open func setTitle(_ text: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func setTitleColor(_ color: UIKit.UIColor?)
}
extension UIKit.UIImage {
  convenience public init?(_ color: UIKit.UIColor, size: CoreFoundation.CGSize = CGSize(width: 1, height: 1))
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open func setCornerBorder(color: UIKit.UIColor? = nil, cornerRadius: CoreFoundation.CGFloat = 15.0, borderWidth: CoreFoundation.CGFloat = 1.5)
  @_Concurrency.MainActor(unsafe) open func setAsShadow(bounds: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat = 0.0, shadowRadius: CoreFoundation.CGFloat = 1)
  @_Concurrency.MainActor(unsafe) public func addSubViews(_ views: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func centerSubView(_ view: UIKit.UIView)
}
public struct FeedResponse : Swift.Decodable {
  public let data: [RLIMFeedSDK.Feed]
  public init(from decoder: any Swift.Decoder) throws
}
public struct Feed : Swift.Decodable {
  public let feed: RLIMFeedSDK.FeedDetail
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeedDetail : Swift.Decodable {
  public let actionID: Swift.Int
  public let body: Swift.String
  public let feedObject: RLIMFeedSDK.FeedObject
  public let attachment: [RLIMFeedSDK.FeedAttachment]?
  public let feedTitle: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeedAttachment : Swift.Decodable {
  public let imageMain: RLIMFeedSDK.ImageMain?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ImageMain : Swift.Decodable {
  public let src: Swift.String
  public let size: RLIMFeedSDK.Size?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Size : Swift.Codable {
  public let width: Swift.Int, height: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeedObject : Swift.Codable {
  public let imageProfile: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class SendRewardResult : ObjectiveC.NSObject, RLIMFeedSDK.APIResponseType {
  @objc final public let message: Swift.String?
  @objc final public let state: RLIMFeedSDK.ApiState
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ChatViewController : RLIMFeedSDK.TSViewController, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
public class DisplayAutoUpgradeDialogModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class DisplayAutoUpgradeDialogMessageModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc public enum Event : Swift.Int {
  case loginWithEmail
  case loginWithFacebook
  case logout
  case viewChats
  case viewSocial
  case viewBeautyCamera
  case viewMore
  case viewContacts
  case viewNotifications
  case viewDiscover
  case viewChatList
  case viewGroups
  case viewHotFeed
  case viewLatestFeed
  case viewFollowingFeed
  case viewTrendingFeed
  case innerFeedViewClicks
  case viewYippiEvents
  case viewTopics
  case viewEvents
  case viewSearchPeople
  case viewHotPeople
  case viewNearbyPeople
  case viewContactPeople
  case viewEShop
  case eShopBannerClicked
  case discoverBannerClicked
  case viewSystemNoti
  case viewAtMeNoti
  case viewLikeNoti
  case viewCommentNoti
  case viewFollowRequestNoti
  case viewTeamInvitationNoti
  case clickTransferPoint
  case clickCollectPoint
  case clickAnnouncement
  case clickEditProfile
  case clickChangePassword
  case clickChangePhoneNo
  case clickWaveAdvertisement
  case skipWaveAdvertisement
  case hideSponsoredAds
  case viewStickersStore
  case viewBeautyCameraStore
  case viewShopping
  case viewTogaGo
  case viewEducation
  case viewNews
  case viewGames
  case viewCentre
  case viewRewardslink
  case viewTAMall
  case viewPointTransactionHistory
  case viewSettings
  case viewQRCode
  case viewFriends
  case viewFollowings
  case viewFollowers
  case viewMyProfile
  case viewWallet
  case clickDailyTreasure
  case clickReward5
  case clickReward10
  case clickReward20
  case clickRewardCustom
  case contactsCustomerServiceClicked
  case contactsInvitationClicked
  case contactsPeopleNearbyClicked
  case contactsGroupChatsClicked
  case contactsMeetingGroupedClicked
  case contactsSecretChatClicked
  case contactBlacklistClicked
  case contactClicked
  case Wave3Clicked
  case trtEnergyClicked
  case trtEnergyMusicVideoWatched
  case trtEnergyWallpaperDownloaded
  case trtEnergyWeblinkClicked
  case advertisementClicked
  case revokeAndEditClicked
  case deleteForEveryoneClicked
  case deleteForSelfClicked
  case deleteMultiForSelfClicked
  case forwardClicked
  case forwardMultiClicked
  case replyMessageClicked
  case copyMessageClicked
  case voiceToTextClicked
  case collectionClicked
  case translateClicked
  case liveBannerClicked
  case liveReplySupporterClicked
  case onlineMeetUserViewed
  case OnboardingPageView
  case OnboardingRegisterAccount
  case OnboardingRegisterUsername
  case OnboardingRegisterPassword
  case OnboardingRegisterPhone
  case OnboardingRegisterOTP
  case OnboardingRegisterReferral
  case OnboardingRegisterProfileSetup
  case OnboardingRegisterUserRecommendations
  case OnboardingForgetPasswordUsername
  case OnboardingForgetPasswordNewPassword
  case OnboardingForgetPasswordOTP
  case OnboardingLogin
  case SubscriptionMenu
  case YippsWantedClicked
  case YippsWantedServiceClicked
  case YippsWantedQRViewClicks
  case YippsWantedDealsClicked
  case YippsWantedSuccessViewClicks
  case YippsWantedViewClicks
  case FloatingEventClicked
  case FloatingEventClosed
  case InviteFriend
  case HomeDashboardClicked
  case LoadLiveError
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ContactSelectCancelClosure = () -> Swift.Void
public typealias ContactSelectFinishClosure = ([RLIMFeedSDK.ContactData]?) -> Swift.Void
public typealias TransactionFinishClosure = (_ id: Swift.Int, _ userId: [Swift.String]?, _ msg: Swift.String) -> Swift.Void
public typealias createGroupFinishBlock = (Foundation.NSString) -> Swift.Void
public typealias TransactionDismissClosure = () -> Swift.Void
@objc @objcMembers public class ContactData : ObjectiveC.NSObject {
  @objc final public let userId: Swift.Int
  @objc final public let userName: Swift.String
  @objc public var imageUrl: Swift.String
  @objc final public let isTeam: Swift.Bool
  @objc final public let displayname: Swift.String
  @objc final public let remarkName: Swift.String
  @objc final public let isBannedUser: Swift.Bool
  @objc public var verifiedType: Swift.String
  @objc public var verifiedIcon: Swift.String
  @objc public var isTop: Swift.Bool
  @objc public init(userId: Swift.Int, userName: Swift.String, imageUrl: Swift.String, isTeam: Swift.Bool, displayname: Swift.String, remarkName: Swift.String = "", isBannedUser: Swift.Bool, verifiedType: Swift.String, verifiedIcon: Swift.String)
  @objc deinit
}
@objc @available(*, deprecated, message: "Use ContactsPickerConfig instead.")
@objcMembers public class ContactSelectorConfig : ObjectiveC.NSObject {
  @objc public enum FUControllerMode : ObjectiveC.NSInteger {
    case IM
    case App
    case Social
    public init?(rawValue: ObjectiveC.NSInteger)
    public typealias RawValue = ObjectiveC.NSInteger
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc public enum contentType : ObjectiveC.NSInteger {
    case defaultContent
    case sticker
    case image
    case video
    case post
    public init?(rawValue: ObjectiveC.NSInteger)
    public typealias RawValue = ObjectiveC.NSInteger
    public var rawValue: ObjectiveC.NSInteger {
      get
    }
  }
  @objc final public let title: Swift.String
  @objc final public let isMultiSelect: Swift.Bool
  @objc final public let filterIds: Foundation.NSArray?
  @objc final public let maxSelectCount: Swift.Int
  @objc final public let enableTeam: Swift.Bool
  @objc final public let enableRobot: Swift.Bool
  @objc final public let enableRecent: Swift.Bool
  @objc final public let teamId: Swift.String?
  @objc final public let doneBtnTitle: Swift.String?
  @objc final public let doneBtnImage: UIKit.UIImage?
  @objc final public let typeOfContent: RLIMFeedSDK.ContactSelectorConfig.contentType
  @objc final public let content: Any?
  @objc final public let mode: RLIMFeedSDK.ContactSelectorConfig.FUControllerMode
  @objc final public let shareToSocial: Swift.Bool
  @objc final public let toastMessage: Swift.Int
  @objc convenience public init(title: Swift.String, isMultiSelect: Swift.Bool, filterIds: Foundation.NSArray?, maxSelectCount: Swift.Int, enableTeam: Swift.Bool, enableRobot: Swift.Bool, enableRecent: Swift.Bool, teamId: Swift.String?, doneBtnTitle: Swift.String?, doneBtnImage: UIKit.UIImage?, toastMessage: Swift.Int)
  @objc public init(title: Swift.String, isMultiSelect: Swift.Bool, filterIds: Foundation.NSArray?, maxSelectCount: Swift.Int, enableTeam: Swift.Bool, enableRobot: Swift.Bool, enableRecent: Swift.Bool, teamId: Swift.String?, doneBtnTitle: Swift.String?, doneBtnImage: UIKit.UIImage?, typeOfContent: RLIMFeedSDK.ContactSelectorConfig.contentType, content: Any?, mode: RLIMFeedSDK.ContactSelectorConfig.FUControllerMode, shareToSocial: Swift.Bool, toastMessage: Swift.Int)
  @objc deinit
}
@objc public protocol StickerShopViewCoordinatorType : ObjectiveC.NSObjectProtocol {
  @objc func start(completion: (() -> Swift.Void)?)
  @objc func showStickerDetail(_ bundleId: Swift.String)
}
@objc public protocol BeautyShopViewCoordinatorType : ObjectiveC.NSObjectProtocol {
  @objc func startPresentView(completion: (() -> Swift.Void)?)
}
@objc public protocol CoordinatorFactoryType {
  @objc func makeStickerShopCoordinator(navigationController: UIKit.UINavigationController) -> (any RLIMFeedSDK.StickerShopViewCoordinatorType)!
  @objc func makeBeautyShopCoordinator(navigationController: UIKit.UINavigationController) -> (any RLIMFeedSDK.BeautyShopViewCoordinatorType)!
}
@objc @objcMembers public class Recipient : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let uid: Swift.String
  @objc final public let displayName: Swift.String
  @objc final public let profilePictureURL: Swift.String
  @objc public init(uid: Swift.String, displayName: Swift.String, profilePictureURL: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseContentPageController : UIKit.UIPageViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension RLIMFeedSDK.BaseContentPageController : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HorizontalPageControlView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public enum HorizontalPageControlType {
    case totalPageCount
    case indicatorFactor
    public static func == (a: RLIMFeedSDK.HorizontalPageControlView.HorizontalPageControlType, b: RLIMFeedSDK.HorizontalPageControlView.HorizontalPageControlType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var horizontalPageControlType: RLIMFeedSDK.HorizontalPageControlView.HorizontalPageControlType
  @_Concurrency.MainActor(unsafe) open var totalPageCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var indicatorFactor: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var indicatorOffset: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open var selectedPosition: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TSNIMUserInfo : Swift.Codable {
  public var id: Swift.Int?
  public var name: Swift.String?
  public var avatar: RLIMFeedSDK.Avatar?
  public var verified: RLIMFeedSDK.Verified?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Avatar : Swift.Codable {
  public let url: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Verified : Swift.Codable {
  public let type: Swift.String?
  public let icon: Swift.String?
  public let description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Gesture {
  case tap(Swift.Int)
  case swipe(UIKit.UISwipeGestureRecognizer.Direction)
  case multiTap(taps: Swift.Int, fingers: Swift.Int)
  case multiSwipe(direction: UIKit.UISwipeGestureRecognizer.Direction, fingers: Swift.Int)
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add<T>(gesture: RLIMFeedSDK.Gesture, action: @escaping (T) -> Swift.Void) -> UIKit.UIGestureRecognizer where T : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add(gesture: RLIMFeedSDK.Gesture, action: @escaping () -> Swift.Void) -> UIKit.UIGestureRecognizer
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addTap<T>(action: @escaping (T) -> Swift.Void) -> UIKit.UIGestureRecognizer where T : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addAction(action: @escaping () -> Swift.Void) -> UIKit.UIGestureRecognizer
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomSizePresentationController : UIKit.UIPresentationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frameOfPresentedViewInContainerView: CoreFoundation.CGRect {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func presentationTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func dismissalTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func containerViewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EShopLandingPageModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EShopLandingBannerModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EShopLandingShopListModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EShopCategoryModel : ObjectMapper.Mappable {
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension UIKit.UIImage {
  public func reWidthImage(width: CoreFoundation.CGFloat) -> UIKit.UIImage
  public func reSizeImage(reSize: CoreFoundation.CGSize) -> UIKit.UIImage
  public func scaleImage(scale: CoreFoundation.CGFloat) -> UIKit.UIImage
}
extension UIKit.UIImage {
  public static func base64ForJpgImage(_ image: UIKit.UIImage) -> Swift.String
}
public struct TSImagePickerUX {
}
public enum LanguageIdentifier : Swift.String, Swift.CaseIterable {
  case english
  case chineseSimplified
  case chineseTraditional
  case korean
  case filipino
  case indonesian
  case japanese
  case malay
  case thai
  case vietnamese
  public var txtLanguageCode: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RLIMFeedSDK.LanguageIdentifier]
  public typealias RawValue = Swift.String
  public static var allCases: [RLIMFeedSDK.LanguageIdentifier] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LocalizationManager : ObjectiveC.NSObject {
  @objc public class func availableLanugages() -> [Swift.String]
  @objc public class func getDisplayNameForLanguageIdentifier(identifier: Swift.String) -> Swift.String
  @objc public class func getDefaultLanguage() -> Swift.String
  @objc public class func getISOLanguageCode() -> Swift.String
  @objc public class func getShortLanguageCode() -> Swift.String
  @objc public class func getTxtTranslateShortLanguageCode() -> Swift.String
  @objc public class func getCurrentLanguage() -> Swift.String
  @objc public class func getCurrentLanguageCode() -> Swift.String
  @objc public class func getCurrentISOLanguageCode() -> Swift.String
  @objc public class func setCurrentLanguage(identifier: Swift.String)
  @objc public class func applyAppLanguage()
  @objc public class func isUsingChinese() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension RLIMFeedSDK.AppTheme {
  @objc public static func UIColorFromRGB(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat) -> UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AppTheme : ObjectiveC.NSObject {
  @objc public static let dimmedLightBackground: UIKit.UIColor
  @objc public static let dimmedDarkBackground: UIKit.UIColor
  @objc public static let dimmedDarkestBackground: UIKit.UIColor
  @objc public static let materialBlack: UIKit.UIColor
  @objc public static let primaryColor: UIKit.UIColor
  @objc public static let primaryBlueColor: UIKit.UIColor
  @objc public static let primaryRedColor: UIKit.UIColor
  @objc public static let primaryLightGreyColor: UIKit.UIColor
  @objc public static let primaryLightColor: UIKit.UIColor
  @objc public static let secondaryColor: UIKit.UIColor
  @objc public static let selectedPrimaryColor: UIKit.UIColor
  @objc public static let aquaGreen: UIKit.UIColor
  @objc public static let warmBlue: UIKit.UIColor
  @objc public static let dullBlue: UIKit.UIColor
  @objc public static let twilightBlue: UIKit.UIColor
  @objc public static let aquaBlue: UIKit.UIColor
  @objc public static let sunflowerYellow: UIKit.UIColor
  @objc public static let squash: UIKit.UIColor
  @objc public static let brownGrey: UIKit.UIColor
  @objc public static let softBlue: UIKit.UIColor
  @objc public static let lightBlue: UIKit.UIColor
  @objc public static let grey: UIKit.UIColor
  @objc public static let backgroundColor: UIKit.UIColor
  @objc public static let darkGrey: UIKit.UIColor
  @objc public static let lightGrey: UIKit.UIColor
  @objc public static let pinkishGrey: UIKit.UIColor
  @objc public static let headerTitleGrey: UIKit.UIColor
  @objc public static let white: UIKit.UIColor
  @objc public static let black: UIKit.UIColor
  @objc public static let red: UIKit.UIColor
  @objc public static let blue: UIKit.UIColor
  @objc public static let waveBlue: UIKit.UIColor
  @objc public static let headerGrey: UIKit.UIColor
  @objc public static let blueGrey: UIKit.UIColor
  @objc public static let inputContainerGrey: UIKit.UIColor
  @objc public static let imStickerBorder: UIKit.UIColor
  @objc public static let indicatorColor: UIKit.UIColor
  @objc public static let toxicGreen: UIKit.UIColor
  @objc public static let orange: UIKit.UIColor
  @objc public static let dimOrange: UIKit.UIColor
  @objc public static let mentionBlueColor: UIKit.UIColor
  @objc public static let warmGrey: UIKit.UIColor
  @objc public static let dodgerBlue: UIKit.UIColor
  @objc public static let inactiveGrey: UIKit.UIColor
  @objc public static let shadowGrey: UIKit.UIColor
  @objc public static let errorRed: UIKit.UIColor
  @objc public static let merchantNameLightGrey: UIKit.UIColor
  @objc public static let merchantNameTextGrey: UIKit.UIColor
  @objc public static let feedExpandBlue: UIKit.UIColor
  public struct LocationTag {
    public static let locationTagBg: UIKit.UIColor
  }
  public struct Sticker {
    public static let lightBlue: UIKit.UIColor
  }
  public struct Live {
    public static let treasureRed: UIKit.UIColor
    public static let treasureYellow: UIKit.UIColor
    public static let liveSettingBackground: UIKit.UIColor
    public static let liveSettingTitleBg: UIKit.UIColor
    public static let liveSettingTitleText: UIKit.UIColor
    public static let liveSettingQualityBorder: UIKit.UIColor
  }
  public struct IM {
    public static let RecordSelectLabelTextColor: UIKit.UIColor
    public static let RecordSelectLabelTextGrayColor: UIKit.UIColor
    public static let RecordSelectStartButtonGrayColor: UIKit.UIColor
  }
  public struct Font {
    public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
    public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
    public static func semibold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
    public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
    public static func heavy(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  }
  @objc public static func AppGradientColor(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, colorTop: CoreGraphics.CGColor, colorBottom: CoreGraphics.CGColor) -> QuartzCore.CAGradientLayer
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class FontSize : ObjectiveC.NSObject {
  @objc public static let defaultNicknameSmallFontSize: CoreFoundation.CGFloat
  @objc public static let defaultTipAndNotiFontSize: CoreFoundation.CGFloat
  @objc public static let defaultLocationDefaultFontSize: CoreFoundation.CGFloat
  @objc public static let defaultNicknameFontSize: CoreFoundation.CGFloat
  @objc public static let defaultTextFontSize: CoreFoundation.CGFloat
  @objc public static let defaultChatroomMsgFontSize: CoreFoundation.CGFloat
  @objc public static var tipAndNotiFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var locationDefaultFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var nicknameFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var nicknameSmallFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var defaultFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var chatroomMsgFontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public class LogRequestRLModel {
  public init(requestId: Swift.Int, startDate: Swift.String, endDate: Swift.String, type: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RejectNetworkRequest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias ShareEmptyClosure = () -> Swift.Void
@objc public protocol ShareActionSheetFactoryType {
  @objc func makeShareActionSheet(thumbnail: Swift.String, contentBody: Swift.String, contentOwner: Swift.String?, contentDesc: Swift.String?, shareUrl: Swift.String, id: Swift.String?, externalSharingItems: [Any], newPostAction: RLIMFeedSDK.ShareEmptyClosure?, owner: UIKit.UIViewController) -> UIKit.UIAlertController
}
@_hasMissingDesignatedInitializers @objcMembers @objc @_Concurrency.MainActor(unsafe) public class EnterPasswordDialog : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension Swift.Array {
  public func convertToString() -> Swift.String?
}
extension Swift.Set {
  public func convertToString() -> Swift.String?
}
public typealias DidEnterSpeech = (Swift.String?) -> Swift.Void
@objc public protocol ViewFactoryType {
  @objc func makeSpeechView(height: CoreFoundation.CGFloat, callBackHandler: RLIMFeedSDK.DidEnterSpeech?) -> UIKit.UIView
  @objc func makeInputContainerView(frame: CoreFoundation.CGRect, callBackHandler: @escaping (_ isSend: Swift.Bool, _ isCamera: Swift.Bool, _ assets: [Photos.PHAsset]?, _ isFullImage: Swift.Bool) -> Swift.Void) -> UIKit.UIView
  @objc func makeInputFileContainerView(frame: CoreFoundation.CGRect, callBackHandler: @escaping (_ isSend: Swift.Bool, _ url: Foundation.URL?) -> Swift.Void) -> UIKit.UIView
  @objc func makeInputLocalContainerView(frame: CoreFoundation.CGRect, callBackHandler: @escaping (_ isSend: Swift.Bool, _ title: Swift.String, _ coordinate: CoreLocation.CLLocationCoordinate2D) -> Swift.Void) -> UIKit.UIView
  @objc func makeTopIndicatorView(message: Swift.String)
  @objc func makeEmptySearchChatPlaceholder() -> UIKit.UIView
  @objc func makeEmptyChatPlaceholder() -> UIKit.UIView
  @objc func makeNetworkErrorPlaceholder() -> UIKit.UIView
}
@objc public protocol ViewControllerFactoryType {
  @objc func makeEggDetailViewController(info: RLIMFeedSDK.ClaimEggResponse, isSender: Swift.Bool, isGroup: Swift.Bool) -> UIKit.UIViewController
  @objc func makeSendEggInChatViewController(typePersonal: Swift.Bool, fromUser: Swift.String, toUser: Swift.String, numberOfMember: Swift.Int, completion: RLIMFeedSDK.TransactionFinishClosure?) -> UIKit.UIViewController
  @objc func makeContactPicker(configuration: RLIMFeedSDK.ContactsPickerConfig, completion: (([RLIMFeedSDK.ContactData]) -> Swift.Void)?) -> UIKit.UIViewController
  @objc func makeRewardViewController(recipient: RLIMFeedSDK.Recipient, rewardType: RLIMFeedSDK.RewardType) -> UIKit.UIViewController
  @objc func makeUserHomepageViewController(userId: Swift.Int, userName: Swift.String) -> UIKit.UIViewController
  @objc func makeUserHomepageViewControllerFromChatroom(userId: Swift.Int, userName: Swift.String, isTeam: Swift.Bool) -> UIKit.UIViewController
  @objc func makeTeamCardViewController(teamId: Swift.String) -> UIKit.UIViewController
  @objc func makeStickerMainViewController() -> UIKit.UIViewController
  @objc func makeCustomerStickerViewController(stickerId: Swift.String) -> UIKit.UIViewController
  @objc func makeSpeechTyperViewController(height: CoreFoundation.CGFloat, callBackHandler: RLIMFeedSDK.DidEnterSpeech?)
  @objc func dimissSpeechTyperViewController()
  @objc func makeMyStickerViewController() -> UIKit.UIViewController
  @objc func makeStickerDetailViewController(bundleId: Swift.String) -> UIKit.UIViewController
  @objc func makeFeedDetail(feedId: Swift.Int) -> UIKit.UIViewController
  @objc func makeCreateGroupViewController(member: [Swift.String], completion: RLIMFeedSDK.createGroupFinishBlock?) -> UIKit.UIViewController
  @objc func makeChatMediaViewController(sessionId: Swift.String, type: ObjectiveC.NSInteger) -> UIKit.UIViewController
  @objc func makeChatMediaVideoPlayerViewController(url: Swift.String) -> UIKit.UIViewController
  @objc func makeNIMVideoPlayerViewController(url: Swift.String) -> UIKit.UIViewController
  @objc func makeTSAlertController(url: Foundation.NSURL, message: Any?, parentVC: UIKit.UIViewController, title: Swift.String, messageDisplay: Swift.String, onSend: @escaping (_ message: Any?, _ url: Foundation.URL?) -> Swift.Void)
  @objc func makeIMActionListView(delegateTarget: Any, actionArray: [Any]) -> UIKit.UIView
  @objc func makeWebview(title: Swift.String?, link: Foundation.URL) -> UIKit.UIViewController
  @objc func makeMessageRequestListTableViewController() -> UIKit.UIViewController
  @objc func makeGroupNotificationTableVC() -> UIKit.UIViewController
  @objc func makeArticleViewController(id: Swift.Int) -> UIKit.UIViewController
  @objc func makeCustomerStickerDialogView(imageUrl: Swift.String, customStickerId: Swift.String, callBackHandler: @escaping (_ isCompleted: Swift.Int) -> Swift.Void) -> UIKit.UIViewController
  @objc func makeCustomerStickerMaxNumDialogView(imageUrl: Swift.String, customStickerId: Swift.String, callBackHandler: @escaping (_ isCompleted: Swift.Int) -> Swift.Void) -> UIKit.UIViewController
  @objc func makeCallViewController(sessionId: Swift.String, video: Swift.Bool) -> UIKit.UIViewController
  @objc func makeIMChatViewController(sessionId: Swift.String, type: Swift.Int, unread: Swift.Int, searchMessageId: Swift.String) -> UIKit.UIViewController
  @objc func makeNTESSessionListTableVC(member: [RLIMFeedSDK.UserAvatarUI], keyword: Swift.String) -> UIKit.UIViewController
  @objc func makeWhiteBoardCallingViewController(type: Swift.Int, room: Swift.String, sessionID: Swift.String, members: [Swift.String], isManager: Swift.Bool, isP2p: Swift.Bool, senderAccount: Swift.String) -> UIKit.UIViewController?
  @objc func makeIMChatViewController(sessionId: Swift.String, type: Swift.Int, unRead: Swift.Int) -> UIKit.UIViewController
  @objc func makeIMDeleteTSAlertController(name: Swift.String, parentVC: UIKit.UIViewController, title: Swift.String, onDelete: @escaping (_ onDelete: Swift.Bool) -> Swift.Void)
  @objc func makeMusicPickerView(duration: CoreFoundation.CGFloat, completion: @escaping (Foundation.URL, Swift.String) -> Swift.Void) -> UIKit.UIViewController
  @objc func makePostShortVideoView(coverImage: UIKit.UIImage?, url: Foundation.URL) -> UIKit.UIViewController
  @objc func makeCancelEditVideoAlert(completion: @escaping () -> Swift.Void) -> UIKit.UIViewController
  @objc func makeImagePicker() -> UIKit.UIViewController
}
@objc public protocol UtilityFactoryType {
  @objc func resetLanguage()
  @objc func getCurrentUserId() -> Swift.Int
  @objc func getUserID(username: Swift.String, onComplete: ((Swift.Int) -> ())?)
  @objc func getIsFriend(username: Swift.String, onComplete: ((Swift.Bool) -> ())?)
  @objc func getMessageRequestCount()
  @objc func messageRequestCount() -> Swift.Int
  @objc func showMessageRequest() -> Swift.Bool
  @objc func navigateToLive(feedId: Swift.Int, viewController: UIKit.UIViewController, completion: ((Swift.Bool) -> ())?)
  @objc func getWhiteListType(username: Swift.String, onComplete: (([Swift.String]?) -> ())?)
  @objc func downloadSticker(bundleId: Swift.String, completion: (() -> Swift.Void)?, onError: @escaping (Swift.String) -> Swift.Void)
  @objc func stopVideoPlayer()
  @objc func translateTexts(string: Swift.String, onSuccess: ((Swift.String) -> Swift.Void)?, onFailure: ((Swift.String, Swift.Int) -> Swift.Void)?)
  @objc func loadOwnStickerList(completion: ((Swift.Bool) -> ())?)
  @objc func handleWeb(url: Foundation.URL, currentVC: UIKit.UIViewController)
  @objc func loadCustomerStickerList(completion: @escaping (_ stickers: [RLIMFeedSDK.CustomerStickerItem]?) -> Swift.Void)
  @objc func openMiniProgram(appId: Swift.String, path: Swift.String, parentVC: UIKit.UIViewController, completion: @escaping ((Swift.Bool, (any Swift.Error)?) -> Swift.Void))
  @objc func getFriendList(userId: Swift.Int, keyWord: Swift.String, onComplete: (([RLIMFeedSDK.UserAvatarUI]) -> ())?)
  @objc func getAvatarImage(userName: Swift.String, onComplete: ((Swift.String) -> ())?)
}
@objc @objcMembers public class TransferRecipient : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let uid: Swift.String
  @objc final public let username: Swift.String
  @objc final public let receiver: Swift.String
  @objc final public let displayName: Swift.String
  @objc final public let profilePictureURL: Swift.String
  @objc public init(uid: Swift.String, displayName: Swift.String, profilePictureURL: Swift.String, username: Swift.String, receiver: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class TransferResponse : ObjectiveC.NSObject, RLIMFeedSDK.APIResponseType {
  @objc final public let state: RLIMFeedSDK.ApiState
  @objc final public let message: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ActivationCode : Swift.Decodable {
  public let to: Swift.String?
  public let requestId: Swift.String
  public let resendTimer: ObjectiveC.NSInteger
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyCodeResponse : Swift.Decodable {
  public let requestId: Swift.String, status: Swift.String
  public let errorText: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Package : Swift.Codable {
  public let id: Swift.String?, uid: Swift.String?
  public let code: Swift.String, packageID: Swift.String
  public let trialID: Swift.String?
  public let periodDay: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PeriodDay : Swift.Decodable {
  public let periodDay: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct EostreState : Swift.Decodable {
  public let success: Swift.Int
  public let memberPackagePin: Swift.String?
  public let message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct EostreTrialCode : Swift.Decodable {
  public let code: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class StickerList : ObjectiveC.NSObject, Swift.Decodable {
  final public let items: [RLIMFeedSDK.Sticker]?
  @objc final public let totalSize: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum MetadataType : Swift.Codable {
  case int(Swift.Int)
  case string(Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Sticker : Swift.Decodable {
  public let bundleIDType: RLIMFeedSDK.MetadataType?
  public let bundleIcon: Swift.String?
  public let bundleName: Swift.String?, description: Swift.String?
  public let isOfficial: Swift.Int?, status: Swift.Int?, isGIF: Swift.Int?
  public let isEvent: Swift.Int?
  public let addedTimestamp: Swift.String?
  public let downloadCount: Swift.Int?
  public let bannerURL: Swift.String?
  public let price: Swift.String?
  public let slug: Swift.String?
  public let voteCount: Swift.Int?
  public let artist: RLIMFeedSDK.Artist?
  public let stickerList: [RLIMFeedSDK.Sticker.StickerList]?
  public let stickers: [RLIMFeedSDK.Sticker]?
  public let todayStats: RLIMFeedSDK.Sticker.SOTDStats?
  public let tipsCount: Swift.Int?
  public let coverSize: Swift.String?, bannerSize: Swift.String?, stickerSize: Swift.String?, backgroundColor: Swift.String?
  public let stickerCreatedBy: Swift.String?
  public let uid: Swift.Int?
  public let hideViewMoment: Swift.Int?
  public let artistID: Swift.Int?
  public let artistName: Swift.String?
  public let icon: Swift.String?, banner: Swift.String?
  public let stickerSet: Swift.Int?, totalPoints: Swift.Int?
  public let id: Swift.Int?
  public let name: Swift.String?
  public let catID: Swift.Int?
  public let image: Swift.String?
  public var bundleID: Swift.Int? {
    get
  }
  public struct SOTDStats : Swift.Codable {
    public let bundleID: Swift.Int, downloadCount: Swift.Int, tipsCount: Swift.Int, downloadPoints: Swift.Int
    public let tipsAmount: Swift.Int, amountPoints: Swift.Int, totalPoints: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StickerList : Swift.Codable {
    public let stickerID: Swift.Int, bundleID: Swift.Int
    public let stickerIcon: Swift.String
    public let stickerName: Swift.String
    public let position: Swift.Int
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerLandingResponse : Swift.Decodable {
  public var data: RLIMFeedSDK.StickerHome?
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerHome : Swift.Decodable {
  public var stickers: [RLIMFeedSDK.StickerCollectionSection]
  public var banner: RLIMFeedSDK.StickerHomeBannerSection?
  public init(from decoder: any Swift.Decoder) throws
}
public enum StickerListingType : Swift.String, Swift.Codable {
  case grid, list, featured, unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StickerType : Swift.String, Swift.Codable {
  case hot_stickers, stickers_of_the_day, new_sticker, recomended_artist, new_artist, featured_category, stickerByCategory, unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StickerCollectionSection : Swift.Decodable {
  public let title: Swift.String
  public let listingType: RLIMFeedSDK.StickerListingType
  public let type: RLIMFeedSDK.StickerType
  public let row: Swift.Int?
  public let bgColor: Swift.String?
  public var data: [RLIMFeedSDK.Sticker]
  public let titleStyle: Swift.String?
  public let showScore: Swift.Bool
  public let hasMoreData: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerHomeBannerSection : Swift.Decodable {
  public let title: Swift.String?
  public let bannerList: [RLIMFeedSDK.StickerBanner]?
  public let delayMillisecond: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public enum StickerBannerActionType : Swift.String, Swift.Codable {
  case url, sticker, unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StickerBanner : Swift.Decodable {
  public let bannerName: Swift.String
  public let bundleId: Swift.Int?
  public let bannerSequence: Swift.Int
  public let bannerUrl: Swift.String?
  public let actionType: RLIMFeedSDK.StickerBannerActionType?
  public let actionValue: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerListModel : Swift.Decodable {
  public let data: RLIMFeedSDK.StickerCollectionSection
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerRankSection : Swift.Decodable {
  public let title: Swift.String
  public let data: [RLIMFeedSDK.Sticker]
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerPaidSection : Swift.Decodable {
  public let title: Swift.String, listingType: Swift.String
  public let type: RLIMFeedSDK.StickerType
  public let data: [RLIMFeedSDK.Sticker]
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerDetail : Swift.Decodable {
  public let bundle: RLIMFeedSDK.Sticker
  public let artist: RLIMFeedSDK.Artist
  public let stickers: [RLIMFeedSDK.StickerItem]
  public let isDownloaded: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct Artist : Swift.Codable {
  public let artistIDType: RLIMFeedSDK.MetadataType
  public let artistName: Swift.String?, description: Swift.String?
  public let icon: Swift.String?, banner: Swift.String?
  public let uid: Swift.Int?
  public var artistID: Swift.Int {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class StickerItem : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let stickerID: Swift.String, bundleID: Swift.String
  @objc final public let stickerIcon: Swift.String
  @objc final public let stickerName: Swift.String, position: Swift.String
  @objc public init(id: Swift.String, bundleId: Swift.String, icon: Swift.String, name: Swift.String, position: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ArtistDetail : Swift.Decodable {
  public var bundle: RLIMFeedSDK.ArtistBundle
  public let artist: [RLIMFeedSDK.Artist]
  public init(from decoder: any Swift.Decoder) throws
}
public struct ArtistBundle : Swift.Decodable {
  public let title: Swift.String
  public var data: [RLIMFeedSDK.Sticker]
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class UserBundle : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let uid: Swift.String, userID: Swift.String
  @objc final public let bundleID: Swift.Int
  @objc final public let bundleIcon: Swift.String
  @objc final public let bundleName: Swift.String
  @objc public func asJSON() -> Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @objcMembers public class CustomerStickerItem : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let Typename: Swift.String?
  @objc final public let customStickerId: Swift.String?
  @objc final public let stickerUrl: Swift.String?
  @objc public init(customStickerId: Swift.String, Typename: Swift.String, stickerUrl: Swift.String)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class CreateCustomerStickerItem : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let data: RLIMFeedSDK.CreateCustomerStickerItem.CreateStickerItem
  @objc public init(data: RLIMFeedSDK.CreateCustomerStickerItem.CreateStickerItem)
  @objc public class CreateStickerItem : ObjectiveC.NSObject, Swift.Decodable {
    final public let uploadCustomSticker: RLIMFeedSDK.CustomerStickerItem
    public init(uploadCustomSticker: RLIMFeedSDK.CustomerStickerItem)
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class CreateCustomerMaxError : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let errors: [RLIMFeedSDK.CreateCustomerMaxError.ErrorItem]
  @objc public init(errors: [RLIMFeedSDK.CreateCustomerMaxError.ErrorItem])
  @objc public class ErrorItem : ObjectiveC.NSObject, Swift.Decodable {
    final public let message: Swift.String
    public init(message: Swift.String)
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class FetchCustomStickersItem : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let __typename: Swift.String
  @objc final public let cursor: Swift.String
  @objc final public let node: RLIMFeedSDK.CustomerStickerItem
  @objc public init(__typename: Swift.String, cursor: Swift.String, node: RLIMFeedSDK.CustomerStickerItem)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum cacheType : Swift.Int {
  case video, photo, document
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Cacher : ObjectiveC.NSObject {
  public init(with pathComponent: Swift.String, cacheType: RLIMFeedSDK.cacheType)
  public func cacheDir() -> Swift.String
  public func deleteCache(path: Swift.String) throws
  @objc deinit
}
public typealias Byte = Swift.UInt8
public struct Digest {
  public let digest: [RLIMFeedSDK.Byte]
  public var checksum: Swift.String {
    get
  }
}
public func calculateMD5(_ bytes: [RLIMFeedSDK.Byte]) -> RLIMFeedSDK.Digest
public func encodeMD5(digest: [RLIMFeedSDK.Byte]) -> Swift.String
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class BaseRecordButton : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func endRecordingAnimation()
  @_Concurrency.MainActor(unsafe) public func startRecordingAnimation()
  @_Concurrency.MainActor(unsafe) public func tapRecordingAnimationWithDuration(duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MiniVideoPageViewController : RLIMFeedSDK.BaseContentPageController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
}
extension RLIMFeedSDK.MiniVideoPageViewController : UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
}
@objc @objcMembers public class WhiteboardCreateChatroomRequestType : ObjectiveC.NSObject, RLIMFeedSDK.RequestType {
  public typealias ResponseType = RLIMFeedSDK.CreateChatroomRequestResult
  @objc final public let roomName: Swift.String
  @objc public init(roomName: Swift.String)
  public var data: RLIMFeedSDK.YPRequestData {
    get
  }
  @objc public func toObjcRequest() -> Foundation.URLRequest
  public typealias T = RLIMFeedSDK.YPRequestData
  @objc deinit
}
@objc @objcMembers public class WhiteboardCloseChatroomRequestType : ObjectiveC.NSObject, RLIMFeedSDK.RequestType {
  public typealias ResponseType = RLIMFeedSDK.CloseChatroomRequestResult
  @objc final public let roomId: Swift.String
  @objc public init(roomId: Swift.String)
  public var data: RLIMFeedSDK.YPRequestData {
    get
  }
  @objc public func toObjcRequest() -> Foundation.URLRequest
  public typealias T = RLIMFeedSDK.YPRequestData
  @objc deinit
}
public let backgroundOperationQueue: Foundation.OperationQueue
public protocol VerifyCacheAccountInfo {
  func setCache(name: Swift.String, idnum: Swift.String, bday: Foundation.Date)
  func getAccountCache() -> (name: Swift.String, idnum: Swift.String, bday: Foundation.Date)?
  func clearVerifyAccCache()
}
public protocol VerifyCacheUserInfo {
  func setCache(for objects: [RLIMFeedSDK.VerifyImageCacheObject])
  func getImageCache() -> [RLIMFeedSDK.VerifyImageCacheObject]?
  func clearVerifyUserCache()
}
public protocol VerifyAddressUserInfo {
  func setCache(for objects: [Swift.String : Swift.String])
  func getAddressCache() -> [Swift.String : Swift.String]?
  func clearCache()
}
extension Foundation.UserDefaults : RLIMFeedSDK.VerifyCacheAccountInfo {
  public func clearVerifyAccCache()
  public func setCache(name: Swift.String, idnum: Swift.String, bday: Foundation.Date)
  public func getAccountCache() -> (name: Swift.String, idnum: Swift.String, bday: Foundation.Date)?
}
extension Foundation.UserDefaults : RLIMFeedSDK.VerifyCacheUserInfo {
  public func clearVerifyUserCache()
  public func setCache(for objects: [RLIMFeedSDK.VerifyImageCacheObject])
  public func getImageCache() -> [RLIMFeedSDK.VerifyImageCacheObject]?
}
extension Foundation.UserDefaults : RLIMFeedSDK.VerifyAddressUserInfo {
  public func clearCache()
  public func setCache(for objects: [Swift.String : Swift.String])
  public func getAddressCache() -> [Swift.String : Swift.String]?
}
public enum VerifyCacheUserImageType : Swift.String, Swift.Codable {
  case front
  case selfie
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct VerifyImageCacheObject {
  public let image: UIKit.UIImage
  public let imageType: RLIMFeedSDK.VerifyCacheUserImageType
  public init(image: UIKit.UIImage, imageType: RLIMFeedSDK.VerifyCacheUserImageType)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FeedInfoDetailViewController : RLIMFeedSDK.TSViewController {
  @_Concurrency.MainActor(unsafe) public var transitionId: Swift.String
  @_Concurrency.MainActor(unsafe) public var afterTime: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(feedId: Swift.Int, isTapMore: Swift.Bool = false, isClickCommentButton: Swift.Bool = false, isVideoFeed: Swift.Bool = false)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
}
extension RLIMFeedSDK.FeedInfoDetailViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) convenience public init<T>(image: UIKit.UIImage?, landscapeImagePhone: UIKit.UIImage? = nil, style: UIKit.UIBarButtonItem.Style = .plain, action: @escaping (T) -> Swift.Void) where T : UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, landscapeImagePhone: UIKit.UIImage? = nil, style: UIKit.UIBarButtonItem.Style = .plain, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) convenience public init<T>(title: Swift.String?, style: UIKit.UIBarButtonItem.Style = .plain, action: @escaping (T) -> Swift.Void) where T : UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?, style: UIKit.UIBarButtonItem.Style = .plain, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) convenience public init<T>(barButtonSystemItem systemItem: UIKit.UIBarButtonItem.SystemItem, action: @escaping (T) -> Swift.Void) where T : UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) convenience public init(barButtonSystemItem systemItem: UIKit.UIBarButtonItem.SystemItem, action: @escaping () -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LineScalePulseIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class VideoPlayerProgressView : UIKit.UIView, RLIMFeedSDK.VideoPlayerSliderViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc public func aliyunPlayerViewSlider(_ slider: RLIMFeedSDK.VideoPlayerSliderView?, event: UIKit.UIControl.Event, clickedSlider sliderValue: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum ButtonStyle {
  case textButton(text: Swift.String, textColor: UIKit.UIColor)
  case stickerButton(text: Swift.String)
  case deleteSticker(image: UIKit.UIImage?)
  case downloadSticker(image: UIKit.UIImage?)
  case `default`(text: Swift.String, color: UIKit.UIColor)
  case waveButton(text: Swift.String, backgroundColor: UIKit.UIColor, textColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  case custom(text: Swift.String, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, fontWeight: UIKit.UIFont.Weight = .bold)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func applyStyle(_ style: RLIMFeedSDK.ButtonStyle)
  @_Concurrency.MainActor(unsafe) public func getIndexPath(_ tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setImageTintColor(_ color: UIKit.UIColor)
}
@_hasMissingDesignatedInitializers public class FeedListCellModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CallRequest {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EventRequestNetworkData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public static let share: RLIMFeedSDK.EventRequestNetworkData
  public var isShowLog: Swift.Bool
  public func configAuthorization(_ authorization: Swift.String?)
  public func text<T>(request: T, shouldProcessParameter: Swift.Bool = true, complete: @escaping (_ result: RLIMFeedSDK.NetworkResult<T>) -> Swift.Void) where T : RLIMFeedSDK.NetworkRequest
  public func textWithBody<T>(request: T, complete: @escaping (_ result: RLIMFeedSDK.NetworkResult<T>) -> Swift.Void) where T : RLIMFeedSDK.NetworkRequest
  @discardableResult
  public func textRequest(method: Alamofire.HTTPMethod, path: Swift.String?, parameter: Swift.Dictionary<Swift.String, Any>?, encoding: (any Alamofire.ParameterEncoding)? = nil, complete: @escaping (_ responseData: Any?, _ responseStatus: Swift.Bool) -> Swift.Void) throws -> Alamofire.DataRequest
  public func textRequest(method: Alamofire.HTTPMethod, path: Swift.String?, parameter: Swift.Dictionary<Swift.String, Any>?, complete: @escaping (_ responseData: Any?, _ responseStatus: Swift.Bool, _ statusCode: Swift.Int?) -> Swift.Void) throws -> Alamofire.DataRequest
  @objc deinit
}
public struct SegmentStyle {
  public var showCover: Swift.Bool
  public var showLine: Swift.Bool
  public var lineCornerRadius: CoreFoundation.CGFloat
  public var scaleTitle: Swift.Bool
  public var scrollTitle: Swift.Bool
  public var scrollLineHeight: CoreFoundation.CGFloat
  public var scrollLineColor: UIKit.UIColor
  public var coverBackgroundColor: UIKit.UIColor
  public var coverCornerRadius: CoreFoundation.CGFloat
  public var coverHeight: CoreFoundation.CGFloat
  public var titleMargin: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var titleBigScale: CoreFoundation.CGFloat
  public var normalTitleColor: UIKit.UIColor
  public var selectedTitleColor: UIKit.UIColor
  public init()
}
public struct PeopleNearBy : Swift.Decodable {
  public let gender: Swift.String
  public let nickname: Swift.String
  public let phone: Swift.String
  public let remark: Swift.String?
  public let username: Swift.String
  public let uid: Swift.String
  public var distanceToDisplay: Swift.String {
    get
  }
  public var showKM: Swift.Bool {
    get
  }
  public var profileImgUrl: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SquareFlowLayoutDelegate : AnyObject {
  func shouldExpandItem(at indexPath: Foundation.IndexPath) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SquareFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) weak public var flowDelegate: (any RLIMFeedSDK.SquareFlowLayoutDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var collectionViewContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TransactionHistory : Swift.Decodable {
  public let history: [RLIMFeedSDK.HistoryModel]
  public let username: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct HistoryModel : Swift.Decodable {
  public let created: Swift.String
  public let type: Swift.String
  public let amount: Swift.String
  public let description: Swift.String
  public let balance: Swift.String
  public var amountValue: Swift.String {
    get
  }
  public var textColor: UIKit.UIColor {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletBalance : Swift.Decodable {
  public let uid: Swift.String, username: Swift.String, phone: Swift.String
  public let tc: Swift.Float, tp: Swift.Float, yPoint: Swift.Float, yipps: Swift.Float, cPoint: Swift.Float
  public let numOfWallet: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public var livePushConfig: RLIMFeedSDK.LiveConnectionConfig?
public var livePullConfig: RLIMFeedSDK.LiveConnectionConfig?
public struct LiveConnectionConfig {
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SendFileManager : ObjectiveC.NSObject, UIKit.UIDocumentPickerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public static let instance: RLIMFeedSDK.SendFileManager
  @objc @_Concurrency.MainActor(unsafe) public var completion: (([Foundation.URL]) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public func presentView(owner: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
  @objc @_Concurrency.MainActor(unsafe) public static func setFileIcon(with fileExtension: Swift.String) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public static func fileIcon(with fileExtension: Swift.String) -> (icon: UIKit.UIImage, type: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func covertToFileString(path: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public enum LabelStyle {
  case bold(size: CoreFoundation.CGFloat, color: UIKit.UIColor)
  case semibold(size: CoreFoundation.CGFloat, color: UIKit.UIColor)
  case regular(size: CoreFoundation.CGFloat, color: UIKit.UIColor)
  case heavy(size: CoreFoundation.CGFloat, color: UIKit.UIColor)
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func applyStyle(_ style: RLIMFeedSDK.LabelStyle, setAdaptive: Swift.Bool = false)
}
extension UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public func throttle<T>(_ event: UIKit.UIControl.Event, interval: Foundation.TimeInterval, handler: @escaping (T, UIKit.UIEvent?) -> Swift.Void) where T : UIKit.UIControl
  @_Concurrency.MainActor(unsafe) public func throttle<T>(_ event: UIKit.UIControl.Event, interval: Foundation.TimeInterval, handler: @escaping (T) -> Swift.Void) where T : UIKit.UIControl
  @_Concurrency.MainActor(unsafe) public func throttle(_ event: UIKit.UIControl.Event, interval: Foundation.TimeInterval, handler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func removeThrottle(for event: UIKit.UIControl.Event)
}
extension SwiftyUserDefaults.DefaultsSerializable {
  public static var _defaultsArray: SwiftyUserDefaults.DefaultsArrayBridge<[Self.T]> {
    get
  }
}
extension SwiftyUserDefaults.DefaultsSerializable where Self : Swift.Decodable, Self : Swift.Encodable {
  public static var _defaults: SwiftyUserDefaults.DefaultsCodableBridge<Self> {
    get
  }
  public static var _defaultsArray: SwiftyUserDefaults.DefaultsCodableBridge<[Self]> {
    get
  }
}
extension SwiftyUserDefaults.DefaultsSerializable where Self : Swift.RawRepresentable {
  public static var _defaults: SwiftyUserDefaults.DefaultsRawRepresentableBridge<Self> {
    get
  }
  public static var _defaultsArray: SwiftyUserDefaults.DefaultsRawRepresentableArrayBridge<[Self]> {
    get
  }
}
extension SwiftyUserDefaults.DefaultsSerializable where Self : Foundation.NSCoding {
  public static var _defaults: SwiftyUserDefaults.DefaultsKeyedArchiverBridge<Self> {
    get
  }
  public static var _defaultsArray: SwiftyUserDefaults.DefaultsKeyedArchiverBridge<[Self]> {
    get
  }
}
public enum ColorConfig {
  case alpha8
  case rgb565
  case argb8888
  case rgbaF16
  case unknown
  public static func == (a: RLIMFeedSDK.ColorConfig, b: RLIMFeedSDK.ColorConfig) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ImageCompress {
  public static func changeColorWithImageData(_ rawData: Foundation.Data, config: RLIMFeedSDK.ColorConfig) -> Foundation.Data?
  public static func getColorConfigWithImageData(_ rawData: Foundation.Data) -> RLIMFeedSDK.ColorConfig
  public static func compressImageData(_ rawData: Foundation.Data, limitLongWidth: CoreFoundation.CGFloat) -> Foundation.Data?
  public static func compressImageData(_ rawData: Foundation.Data, limitDataSize: Swift.Int) -> Foundation.Data?
  @objc deinit
}
public enum TSURLPath : Swift.String {
  case temp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NIMViewControllerProtocol : ObjectiveC.NSObjectProtocol {
}
@objc public protocol NIMViewControllerType : RLIMFeedSDK.NIMViewControllerProtocol {
}
@objc public protocol NIMViewControllerFactoryType {
  @objc func makeSingleChatDetailViewController() -> (any RLIMFeedSDK.NIMViewControllerType)!
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BallBeatIndicator : RLIMFeedSDK.LBIndicator {
  @_Concurrency.MainActor(unsafe) override open func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias EmptyClosure = () -> Swift.Void
public enum Theme {
  case white, dark
  public static func == (a: RLIMFeedSDK.Theme, b: RLIMFeedSDK.Theme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FileControlManager : ObjectiveC.NSObject {
  public static let shared: RLIMFeedSDK.FileControlManager
  public func getFilesFromPath(_ path: Foundation.URL) -> [Foundation.URL]
  @discardableResult
  public func deleteFile(atPath filePath: Swift.String?) -> Swift.Bool
  public func getFileSizeInMB(for filePath: Swift.String) -> Swift.Double?
  @objc override dynamic public init()
  @objc deinit
}
public struct ModuleModel : ObjectMapper.Mappable {
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension Foundation.Date {
  public func compareDates(_ components: Foundation.Calendar.Component..., as date: Foundation.Date, using calendar: Foundation.Calendar = .current) -> Swift.Bool
  public func toFormat(_ format: Swift.String) -> Swift.String
  public static func endOfDay(for date: Foundation.Date) -> Foundation.Date
  public var epochTime: Swift.Double {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var year: Swift.Int {
    get
  }
  public var timeStamp: Swift.String {
    get
  }
  public var milliStamp: Swift.String {
    get
  }
  public var classicTimeFormat: Swift.String {
    get
  }
  public var utcTimeStamp: Swift.String {
    get
  }
  public func isBetween(_ date1: Foundation.Date, and date2: Foundation.Date) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class FeedIMLoginParam : ObjectiveC.NSObject {
  public var themeColor: Swift.Int
  public var apiBaseURL: Swift.String
  public var uploadFileURL: Swift.String
  public var lokaliseProjectID: Swift.String
  public var lokaliseSDKToken: Swift.String
  public var realm: RealmSwift.Realm!
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NotificationCenter {
  @discardableResult
  public func observe(_ name: Foundation.NSNotification.Name?, object: Swift.AnyObject? = nil, action: @escaping () -> Swift.Void) -> any RLIMFeedSDK.Action
  @discardableResult
  @nonobjc public func observe(_ name: Foundation.NSNotification.Name?, object: Swift.AnyObject? = nil, action: @escaping (Foundation.NSNotification) -> Swift.Void) -> any RLIMFeedSDK.Action
  @discardableResult
  public func add(observer: ObjectiveC.NSObject, name: Foundation.NSNotification.Name?, object: Swift.AnyObject? = nil, action: @escaping () -> Swift.Void) -> any RLIMFeedSDK.Action
  @discardableResult
  @nonobjc public func add(observer: ObjectiveC.NSObject, name: Foundation.NSNotification.Name?, object: Swift.AnyObject? = nil, action: @escaping (Foundation.NSNotification) -> Swift.Void) -> any RLIMFeedSDK.Action
  public func stopObserving(action: any RLIMFeedSDK.Action)
  public func stopObserver(_ observer: ObjectiveC.NSObject, name: Foundation.NSNotification.Name? = nil, object: Swift.AnyObject? = nil)
}
@objc extension Foundation.Bundle {
  @objc dynamic public class func setLanguage(_ language: Swift.String)
}
@objc public enum MessageStatus : Swift.Int {
  case normal = 0
  case pending
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageType : Swift.Int {
  case incoming = 0
  case outgoing
  case tip
  case time
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct YPCustomizer {
  public struct FontSize {
    public static let verySmall: CoreFoundation.CGFloat
    public static let small: CoreFoundation.CGFloat
    public static let normal: CoreFoundation.CGFloat
    public static let big: CoreFoundation.CGFloat
  }
  public struct Color {
    public static let primaryBlue: UIKit.UIColor
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class NTESCreateTeamCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers final public class TSUser : ObjectiveC.NSObject, Swift.Codable, SwiftyUserDefaults.DefaultsSerializable {
  @objc final public let uid: Swift.String
  @objc final public let phone: Swift.String
  @objc final public let username: Swift.String
  @objc final public let nickname: Swift.String
  @objc final public var token: Swift.String {
    @objc get
  }
  @objc final public let displayname: Swift.String
  @objc public init(uid: Swift.String, username: Swift.String, phone: Swift.String, nickname: Swift.String, displayname: Swift.String)
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.TSUser]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.TSUser>
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension RLIMFeedSDK.TSUser {
  @objc final public func update(headsmall: Swift.String, headlarge: Swift.String) -> RLIMFeedSDK.TSUser
  convenience public init(from decoder: any Swift.Decoder) throws
}
public struct ProfileSetting : Swift.Decodable {
  public let uid: Swift.String, sort: Swift.String, username: Swift.String, phone: Swift.String
  public let email: Swift.String, password: Swift.String, nickname: Swift.String, isvip: Swift.String
  public let headlarge: Swift.String
  public let headsmall: Swift.String?
  public let gender: Swift.String, sign: Swift.String, province: Swift.String, city: Swift.String
  public let isfriend: Swift.Int
  public let isblack: Swift.String, verify: Swift.String, isstar: Swift.String, remark: Swift.String
  public let getmsg: Swift.String, fauth1: Swift.String, fauth2: Swift.String
  public let picture1: Swift.String, picture2: Swift.String, picture3: Swift.String, cover: Swift.String, createtime: Swift.String
  public func update(_ oldUser: RLIMFeedSDK.TSUser) -> RLIMFeedSDK.TSUser
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TicketUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var circleY: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var circleRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var needLeftCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var needRightCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol CoordinatorType : AnyObject {
  init(services: any RLIMFeedSDK.ServicesType, navigation: UIKit.UINavigationController?)
  func start()
  var services: any RLIMFeedSDK.ServicesType { get }
  var finish: (_ coordinator: any RLIMFeedSDK.CoordinatorType) -> () { get set }
  var navigation: UIKit.UINavigationController? { get set }
  var currentViewController: UIKit.UIViewController? { get }
}
public protocol TabCoordinatorType {
  associatedtype RootType : UIKit.UIViewController
  var rootViewController: Self.RootType { get }
  var tabBarItem: UIKit.UITabBarItem { get }
}
extension RLIMFeedSDK.TabCoordinatorType {
  public var deGenericize: RLIMFeedSDK.AnyTabCoordinator {
    get
  }
}
extension RLIMFeedSDK.CoordinatorType {
  public var currentViewController: UIKit.UIViewController? {
    get
  }
}
@_hasMissingDesignatedInitializers public class AnyTabCoordinator {
  public var rootViewController: UIKit.UIViewController
  public var coordinatorClassName: Swift.String
  @objc deinit
}
public enum PostProgressStatus {
  case posting
  case finishingUp
  case complete
  case fail
  case rejectPostFail
  public static func == (a: RLIMFeedSDK.PostProgressStatus, b: RLIMFeedSDK.PostProgressStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TSPopUpType : Swift.Int {
  case moreUser
  case moreMe
  case share
  case selfComment
  case normalComment
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Typist : ObjectiveC.NSObject {
  public static let shared: RLIMFeedSDK.Typist
  public struct KeyboardOptions {
    public let belongsToCurrentApp: Swift.Bool
    public let startFrame: CoreFoundation.CGRect
    public let endFrame: CoreFoundation.CGRect
    public let animationCurve: UIKit.UIView.AnimationCurve
    public let animationDuration: Swift.Double
  }
  public typealias TypistCallback = (RLIMFeedSDK.Typist.KeyboardOptions) -> Swift.Void
  public enum KeyboardEvent {
    case willShow
    case didShow
    case willHide
    case didHide
    case willChangeFrame
    case didChangeFrame
    public static func == (a: RLIMFeedSDK.Typist.KeyboardEvent, b: RLIMFeedSDK.Typist.KeyboardEvent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func on(event: RLIMFeedSDK.Typist.KeyboardEvent, do callback: RLIMFeedSDK.Typist.TypistCallback?) -> Self
  public func start()
  public func stop()
  public func clear()
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func startShimmering(margin: Swift.Bool = false, background: Swift.Bool, duration: Swift.Double = 2.0)
  @_Concurrency.MainActor(unsafe) public func stopShimmering()
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func displayActivityIndicator(shouldDisplay: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TSSearchBarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let searchTextFiled: UIKit.UITextField
  @objc deinit
}
public struct MimeType {
  public var value: Swift.String {
    get
  }
  public init(path: Swift.String)
  public init(path: Foundation.NSString)
  public init(url: Foundation.URL)
}
public struct SocialVideoResponse : Swift.Decodable {
  public let response: [RLIMFeedSDK.Video]
  public let canCreate: Swift.Int, totalItemCount: Swift.Int
  public let filter: RLIMFeedSDK.Filter
  public init(from decoder: any Swift.Decoder) throws
}
public struct Filter : Swift.Decodable {
  public let type: Swift.String, name: Swift.String, label: Swift.String
  public let multiOptions: RLIMFeedSDK.MultiOptions
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiOptions : Swift.Decodable {
  public let empty: Swift.String, creationDate: Swift.String, modifiedDate: Swift.String, viewCount: Swift.String
  public let likeCount: Swift.String, commentCount: Swift.String, rating: Swift.String, favouriteCount: Swift.String
  public let featured: Swift.String, bestVideo: Swift.String, bestChannel: Swift.String, sponsored: Swift.String
  public let title: Swift.String, titleReverse: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct Video : Swift.Decodable {
  public let videoID: Swift.Int
  public let title: Swift.String, description: Swift.String
  public let search: Swift.Int
  public let ownerType: Swift.String
  public let ownerID: Swift.Int
  public let parentType: Swift.String?, parentID: Swift.String?
  public let creationDate: Swift.String, modifiedDate: Swift.String
  public let viewCount: Swift.Int, commentCount: Swift.Int, type: Swift.Int
  public let code: Swift.String
  public let categoryID: Swift.Int, status: Swift.Int
  public let rating: Swift.Float
  public let fileID: Swift.Int, duration: Swift.Int, rotation: Swift.Int, mainChannelID: Swift.Int
  public let subcategoryID: Swift.Int?, subsubcategoryID: Swift.Int?, photoID: Swift.Int?
  public let profileType: Swift.Int, featured: Swift.Int, favouriteCount: Swift.Int, sponsored: Swift.Int
  public let seaoLocationid: Swift.Int
  public let location: Swift.String
  public let networksPrivacy: Swift.String?
  public let likeCount: Swift.Int, synchronized: Swift.Int
  public let image: Swift.String, imageNormal: Swift.String, imageProfile: Swift.String, imageIcon: Swift.String
  public let contentURL: Swift.String
  public let ownerImage: Swift.String, ownerImageNormal: Swift.String, ownerImageProfile: Swift.String, ownerImageIcon: Swift.String
  public let ownerTitle: Swift.String
  public let allowToView: Swift.Int, ratingCount: Swift.Int
  public let videoURL: Swift.String
  public let isPassword: Swift.Int
  public let authView: Swift.String, authComment: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct State : Swift.Decodable {
  public let code: Swift.Int
  public let msg: Swift.String
  public let debugMsg: Swift.String
  public let url: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public protocol APIResponseType : Swift.Decodable {
  var state: RLIMFeedSDK.ApiState { get }
  var message: Swift.String? { get }
}
public struct APIResponse<Response> : Swift.Decodable where Response : Swift.Decodable {
  public let state: RLIMFeedSDK.State
  public let message: Swift.String?
  public let data: Response?
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class DSGradientProgressView : UIKit.UIView, QuartzCore.CAAnimationDelegate {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var barColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func start()
  @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
public enum VoucherBannerType {
  case image
  case video
  public static func == (a: RLIMFeedSDK.VoucherBannerType, b: RLIMFeedSDK.VoucherBannerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VoucherButtonType {
  case getVoucher
  case isExpiring
  case expired
  case redeem
  case isRedeemed
  public static func == (a: RLIMFeedSDK.VoucherButtonType, b: RLIMFeedSDK.VoucherButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol Action {
  @objc var key: Swift.String { get }
  @objc var selector: ObjectiveC.Selector { get }
}
public enum BehaviorType : Swift.String {
  case expose
  case click
  case search
  case like
  case unlike
  case comment
  case collect
  case uncollect
  case stay
  case share
  case tip
  case dislike
  case im_msg
  case forward
  case miniAppLog
  case event
  case scashSuccess
  case scashPending
  case scashFailed
  case scashRefund
  case scashUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ItemType : Swift.String {
  case image
  case shortvideo
  case item
  case homeModuleApp
  case homeFindMore
  case homeBanner
  case searchMerchant
  case searchFeed
  case searchUser
  case miniLog
  case voucherDashboard
  case voucherCategory
  case voucherSearch
  case voucherDetail
  case getVoucher
  case voucherRedeem
  case mapviewMerchantPopup
  case mapviewMerchantSearch
  case scash
  case utilitiesBillProvider
  case utilitiesBillProviderSelected
  case utilitiesBillProviderCategorySelected
  case mobileTopUpProvider
  case mobileTopUpProviderSelected
  case mobileTopUpProviderPackagesSelected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ModuleId : Swift.String {
  case home
  case search
  case feed
  case miniApp
  case voucher
  case voucherRedeem
  case merchantMapView
  case scash
  case utilitiesBill
  case mobileTopUp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PageId : Swift.String {
  case home
  case search
  case feed
  case homeModuleApp
  case homeFindMore
  case homeBanner
  case searchMerchant
  case searchFeed
  case searchUser
  case miniApp
  case voucherDashboardCategory
  case voucherDashboardVoucher
  case voucherCategoryListCategory
  case voucherCategoryListVoucher
  case voucherSearch
  case voucherDetail
  case getVoucher
  case voucherRedeem
  case mapviewMerchantPopup
  case mapviewMerchantSearch
  case scash
  case utilitiesBillProviderList
  case utilitiesBillProviderCategoryList
  case mobileTopUpProviderList
  case mobileTopUpProviderDetail
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.NSNotification.Name {
  public struct Reachability {
    public static let Changed: Foundation.NSNotification.Name
  }
  public struct AvatarButton {
    public static let DidClick: Foundation.NSNotification.Name
    public static let UnknowDidClick: Foundation.NSNotification.Name
  }
  public struct Moment {
    public static let TopicAddNew: Foundation.NSNotification.Name
    public static let paidReloadFeedList: Foundation.NSNotification.Name
    public static let momentDetailVCDelete: Foundation.NSNotification.Name
    public static let reload: Foundation.NSNotification.Name
    public static let update: Foundation.NSNotification.Name
    public static let block: Foundation.NSNotification.Name
    public static let momentMerchantDidClick: Foundation.NSNotification.Name
    public static let recommendedChanged: Foundation.NSNotification.Name
  }
  public struct CommentChange {
    public static let change: Foundation.NSNotification.Name
    public static let editModel: Foundation.NSNotification.Name
  }
  public struct Reaction {
    public static let show: Foundation.NSNotification.Name
  }
  public struct Channels {
    public static let follow: Foundation.NSNotification.Name
  }
  public struct APNs {
    public static let receiveNotice: Foundation.NSNotification.Name
    public static let queryData: Foundation.NSNotification.Name
  }
  public struct NavigationController {
    public static let showIndicatorA: Foundation.NSNotification.Name
    public static let showIMErrorIndicatorA: Foundation.NSNotification.Name
  }
  public struct User {
    public static let login: Foundation.NSNotification.Name
    public static let UpdateBiometricSetting: Foundation.Notification.Name
    public static let LoginNotification: Foundation.Notification.Name
  }
  public struct Visitor {
    public static let login: Foundation.NSNotification.Name
  }
  public struct News {
    public static let pressNewsDetailLikeBtn: Foundation.NSNotification.Name
    public static let pressNewsDetailUnlikeBtn: Foundation.NSNotification.Name
  }
  public struct Chat {
    public static let tapChatDetailImage: Foundation.NSNotification.Name
    public static let hyGetPasswordFalse: Foundation.NSNotification.Name
    public static let clickEditGroupBtn: Foundation.NSNotification.Name
    public static let uploadGrupInfo: Foundation.NSNotification.Name
    public static let uploadLocGrupInfo: Foundation.NSNotification.Name
    public static let showNotice: Foundation.NSNotification.Name
  }
  public struct Group {
    public static let uploadGroupInfo: Foundation.NSNotification.Name
    public static let joined: Foundation.NSNotification.Name
  }
  public struct Setting {
    public static let setPassword: Foundation.NSNotification.Name
    public static let updateFloatButton: Foundation.NSNotification.Name
    public static let launchComplete: Foundation.NSNotification.Name
    public static let configUpdated: Foundation.NSNotification.Name
  }
  public struct Video {
    public static let muteAll: Foundation.NSNotification.Name
    public static let disableAutoplay: Foundation.NSNotification.Name
  }
  public struct Subscribe {
    public static let reloadStar: Foundation.NSNotification.Name
  }
  public struct DashBoard {
    public static let reloadCollectionView: Foundation.NSNotification.Name
    public static let reloadCSBadge: Foundation.NSNotification.Name
    public static let reloadNotificationBadge: Foundation.NSNotification.Name
    public static let reloadUserInfo: Foundation.NSNotification.Name
    public static let teenModeChanged: Foundation.NSNotification.Name
  }
  public struct Wallet {
    public static let reloadBalance: Foundation.NSNotification.Name
  }
  public struct Country {
    public static let reloadCountry: Foundation.NSNotification.Name
    public static let reloadMobileTopup: Foundation.NSNotification.Name
  }
  public struct SCash {
    public static let rlpgCallBack: Foundation.NSNotification.Name
  }
  public struct Voucher {
    public static let stopVideo: Foundation.NSNotification.Name
    public static let updateRedeemedVoucher: Foundation.NSNotification.Name
  }
  public struct Chatroom {
    public static let updateProfile: Foundation.Notification.Name
  }
  public struct Transaction {
  }
}
@objc public protocol MKToolTipDelegate {
  @objc func toolTipViewDidAppear(for identifier: Swift.String)
  @objc func toolTipViewDidDisappear(for identifier: Swift.String, with timeInterval: Foundation.TimeInterval)
}
extension RLIMFeedSDK.MKToolTip {
  @_Concurrency.MainActor(unsafe) public func dismissToolTips()
}
extension UIKit.UIView {
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func showToolTip(identifier: Swift.String, title: Swift.String? = nil, message: Swift.String, button: Swift.String? = nil, arrowPosition: RLIMFeedSDK.MKToolTip.ArrowPosition, preferences: RLIMFeedSDK.ToolTipPreferences = ToolTipPreferences(), delegate: (any RLIMFeedSDK.MKToolTipDelegate)? = nil) -> RLIMFeedSDK.MKToolTip
}
extension UIKit.UIBarItem {
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func showToolTip(identifier: Swift.String, title: Swift.String? = nil, message: Swift.String, button: Swift.String? = nil, arrowPosition: RLIMFeedSDK.MKToolTip.ArrowPosition, preferences: RLIMFeedSDK.ToolTipPreferences = ToolTipPreferences(), delegate: (any RLIMFeedSDK.MKToolTipDelegate)? = nil) -> RLIMFeedSDK.MKToolTip?
}
@_inheritsConvenienceInitializers @objc public class ToolTipPreferences : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc public class Drawing : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc public class Arrow : ObjectiveC.NSObject {
      @objc public var size: CoreFoundation.CGSize
      @objc public var tipCornerRadius: CoreFoundation.CGFloat
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc public class Bubble : ObjectiveC.NSObject {
      @_inheritsConvenienceInitializers @objc public class Border : ObjectiveC.NSObject {
        @objc public var color: UIKit.UIColor?
        @objc public var width: CoreFoundation.CGFloat
        @objc override dynamic public init()
        @objc deinit
      }
      @objc public var inset: CoreFoundation.CGFloat
      @objc public var spacing: CoreFoundation.CGFloat
      @objc public var cornerRadius: CoreFoundation.CGFloat
      @objc public var maxWidth: CoreFoundation.CGFloat
      @objc public var color: UIKit.UIColor {
        @objc get
        @objc set
      }
      @objc public var gradientLocations: [CoreFoundation.CGFloat]
      @objc public var gradientColors: [UIKit.UIColor]
      @objc public var border: RLIMFeedSDK.ToolTipPreferences.Drawing.Bubble.Border
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc public class Title : ObjectiveC.NSObject {
      @objc public var font: UIKit.UIFont
      @objc public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc public class Message : ObjectiveC.NSObject {
      @objc public var font: UIKit.UIFont
      @objc public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc public class Button : ObjectiveC.NSObject {
      @objc public var font: UIKit.UIFont
      @objc public var color: UIKit.UIColor
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc public class Background : ObjectiveC.NSObject {
      @objc public var color: UIKit.UIColor {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc public var arrow: RLIMFeedSDK.ToolTipPreferences.Drawing.Arrow
    @objc public var bubble: RLIMFeedSDK.ToolTipPreferences.Drawing.Bubble
    @objc public var title: RLIMFeedSDK.ToolTipPreferences.Drawing.Title
    @objc public var message: RLIMFeedSDK.ToolTipPreferences.Drawing.Message
    @objc public var button: RLIMFeedSDK.ToolTipPreferences.Drawing.Button
    @objc public var background: RLIMFeedSDK.ToolTipPreferences.Drawing.Background
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class Animating : ObjectiveC.NSObject {
    @objc public var dismissTransform: CoreFoundation.CGAffineTransform
    @objc public var showInitialTransform: CoreFoundation.CGAffineTransform
    @objc public var showFinalTransform: CoreFoundation.CGAffineTransform
    @objc public var springDamping: CoreFoundation.CGFloat
    @objc public var springVelocity: CoreFoundation.CGFloat
    @objc public var showInitialAlpha: CoreFoundation.CGFloat
    @objc public var dismissFinalAlpha: CoreFoundation.CGFloat
    @objc public var showDuration: Swift.Double
    @objc public var dismissDuration: Swift.Double
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var drawing: RLIMFeedSDK.ToolTipPreferences.Drawing
  @objc public var animating: RLIMFeedSDK.ToolTipPreferences.Animating
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MKToolTip : UIKit.UIView {
  @objc public enum ArrowPosition : Swift.Int {
    case top
    case right
    case bottom
    case left
    case topRight
    case topRightWithButtonHeight
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) final public let controller: RLIMFeedSDK.ToolTipViewController
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ToolTipViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public struct PaidImage {
    public static let buyPic: Foundation.NSNotification.Name
  }
}
@objc public enum RewardType : Swift.Int {
  case stickerArtist
  case photo
  case video
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class CustomizeSegmentedView : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var items: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var selectedLabelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var unselectedLabelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var thumbColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var padding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objc @objcMembers public class MeetingListItem : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String, uid: Swift.String, name: Swift.String
  @objc final public let content: Swift.String, start: Swift.String, end: Swift.String, createtime: Swift.String
  @objc final public let roomid: Swift.String?, role: Swift.String?, logo: Swift.String?, logolarge: Swift.String?
  @objc final public let creator: Swift.String, memberCount: Swift.String, applyCount: Swift.String
  final public let isJoin: Swift.Int?
  @objc public var startDate: Swift.String {
    @objc get
  }
  @objc public var endDate: Swift.String {
    @objc get
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol UsersProviderType {
  func getUsers()
  func getUser(with id: Swift.Int)
}
public struct UsersProvider : RLIMFeedSDK.UsersProviderType {
  public func getUsers()
  public func getUser(with id: Swift.Int)
}
extension UIKit.UIControl {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add<T>(event: UIKit.UIControl.Event, action: @escaping (T, UIKit.UIEvent?) -> Swift.Void) -> any RLIMFeedSDK.Action where T : UIKit.UIControl
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add<T>(event: UIKit.UIControl.Event, action: @escaping (T) -> Swift.Void) -> any RLIMFeedSDK.Action where T : UIKit.UIControl
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add(event: UIKit.UIControl.Event, action: @escaping () -> Swift.Void) -> any RLIMFeedSDK.Action
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add<T>(events: [UIKit.UIControl.Event], action: @escaping (T, UIKit.UIEvent?) -> Swift.Void) -> [any RLIMFeedSDK.Action] where T : UIKit.UIControl
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addAction<T>(events: [UIKit.UIControl.Event], action: @escaping (T) -> Swift.Void) -> [any RLIMFeedSDK.Action] where T : UIKit.UIControl
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addAction(events: [UIKit.UIControl.Event], action: @escaping () -> Swift.Void) -> [any RLIMFeedSDK.Action]
  @available(*, deprecated, message: "Use remove(_:for:) instead")
  @_Concurrency.MainActor(unsafe) public func remove(action: any RLIMFeedSDK.Action, forControlEvents events: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func remove(_ action: any RLIMFeedSDK.Action, for events: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func removeActions(for events: UIKit.UIControl.Event)
}
public enum LineViewSide {
  case inBottom
  case inTop
  case inLeft
  case inRight
  case outBottom
  case outTop
  case outLeft
  case outRight
  public static func == (a: RLIMFeedSDK.LineViewSide, b: RLIMFeedSDK.LineViewSide) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func pauseInteraction(for duration: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func removeGestures()
  @_Concurrency.MainActor(unsafe) public func dropShadow(shadowColor: UIKit.UIColor = UIColor.black, opacity: Swift.Float = 0.3, height: CoreFoundation.CGFloat = 3.0, shadowRadius: CoreFoundation.CGFloat = 4.0)
  @_Concurrency.MainActor(unsafe) public func makeHidden()
  @_Concurrency.MainActor(unsafe) public func makeVisible()
  @_Concurrency.MainActor(unsafe) public func applyBorder(color: UIKit.UIColor = UIColor.clear, width: CoreFoundation.CGFloat = 0.0)
  @_Concurrency.MainActor(unsafe) public func borders(for edges: [UIKit.UIRectEdge], width: CoreFoundation.CGFloat = 1, color: UIKit.UIColor = .black)
  @_Concurrency.MainActor(unsafe) public func roundCorner(_ radius: CoreFoundation.CGFloat = 5.0)
  @_Concurrency.MainActor(unsafe) public func circleCorner()
  @_Concurrency.MainActor(unsafe) public func roundCornerWithCorner(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat, fillColor: UIKit.UIColor, shadow: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func presentView(view: UIKit.UIView, animated: Swift.Bool, complete: () -> ())
  @_Concurrency.MainActor(unsafe) public func doAlertAnimate(complete: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public func hidAllSubView(view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func showAllSubview(view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat = 8)
  @_Concurrency.MainActor(unsafe) public func rotate(duration: Swift.Double = 1)
  @_Concurrency.MainActor(unsafe) public func counterRotate(duration: Swift.Double = 1)
  @_Concurrency.MainActor(unsafe) public func stopRotating()
  @_Concurrency.MainActor(unsafe) public func getImage() -> UIKit.UIImage
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public func removeAllArrangedSubviews()
  @_Concurrency.MainActor(unsafe) public func customize(color: UIKit.UIColor = .clear, radiusSize: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var badge: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func addBadge()
  @_Concurrency.MainActor(unsafe) public func addBadgeProfile()
  @_Concurrency.MainActor(unsafe) public func removeBadge()
}
@objc @objcMembers public class ContactsPickerConfig : ObjectiveC.NSObject {
  @objc final public let title: Swift.String
  @objc final public let rightButtonTitle: Swift.String
  @objc final public let allowMultiSelect: Swift.Bool
  @objc final public let enableTeam: Swift.Bool
  @objc final public let enableRecent: Swift.Bool
  @objc final public let enableRobot: Swift.Bool
  @objc final public let maximumSelectCount: Swift.Int
  @objc final public let excludeIds: [Swift.String]?
  @objc final public let members: [Swift.String]?
  @objc final public let enableButtons: Swift.Bool
  @objc final public let allowSearchForOtherPeople: Swift.Bool
  @objc public init(title: Swift.String, rightButtonTitle: Swift.String, allowMultiSelect: Swift.Bool = false, enableTeam: Swift.Bool = false, enableRecent: Swift.Bool = false, enableRobot: Swift.Bool = false, maximumSelectCount: Swift.Int = 999999, excludeIds: [Swift.String]? = nil, members: [Swift.String]? = nil, enableButtons: Swift.Bool = false, allowSearchForOtherPeople: Swift.Bool = true)
  @objc public class func shareToChatConfig() -> RLIMFeedSDK.ContactsPickerConfig
  @objc public class func selectFriendToChatConfig() -> RLIMFeedSDK.ContactsPickerConfig
  @objc public class func selectFriendBasicConfig(_ excludeIds: [Swift.String]?) -> RLIMFeedSDK.ContactsPickerConfig
  @objc public class func mentionConfig(_ members: [Swift.String]?) -> RLIMFeedSDK.ContactsPickerConfig
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public struct Network {
    public static let Illicit: Foundation.NSNotification.Name
    public static let HostDown: Foundation.NSNotification.Name
  }
}
public enum RquestNetworkDataError : Swift.Error {
  case uninitialized
  public static func == (a: RLIMFeedSDK.RquestNetworkDataError, b: RLIMFeedSDK.RquestNetworkDataError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.String {
  case networkErrorFailing
  case networkTimedOut
  case requestCanceled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NetworkRequest {
  var urlPath: Swift.String! { get set }
  var method: Alamofire.HTTPMethod { get set }
  var parameter: [Swift.String : Any]? { get set }
  var parameterBody: Any? { get set }
  associatedtype ResponseModel : ObjectMapper.Mappable
}
public struct Empty : ObjectMapper.Mappable {
  public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
}
public struct NetworkFullResponse<T> where T : RLIMFeedSDK.NetworkRequest {
  public let statusCode: Swift.Int
  public var model: T.ResponseModel?
  public var models: [T.ResponseModel]
  public var message: Swift.String?
  public var sourceData: Any?
}
public enum NetworkResult<T> where T : RLIMFeedSDK.NetworkRequest {
  case success(RLIMFeedSDK.NetworkFullResponse<T>)
  case failure(RLIMFeedSDK.NetworkFullResponse<T>)
  case error(RLIMFeedSDK.NetworkError)
}
public typealias NetworkResponse = Any
@objc @_inheritsConvenienceInitializers public class RequestNetworkData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public static let share: RLIMFeedSDK.RequestNetworkData
  public var isShowLog: Swift.Bool
  public func configAuthorization(_ authorization: Swift.String?)
  public func text<T>(request: T, shouldProcessParameter: Swift.Bool = true, isOtherURL: Swift.Bool = false, complete: @escaping (_ result: RLIMFeedSDK.NetworkResult<T>) -> Swift.Void) where T : RLIMFeedSDK.NetworkRequest
  @discardableResult
  public func textRequest(method: Alamofire.HTTPMethod, path: Swift.String?, parameter: Swift.Dictionary<Swift.String, Any>?, encoding: (any Alamofire.ParameterEncoding)? = nil, complete: @escaping (_ responseData: Any?, _ responseStatus: Swift.Bool) -> Swift.Void) throws -> Alamofire.DataRequest
  public func textRequest(method: Alamofire.HTTPMethod, path: Swift.String?, parameter: Swift.Dictionary<Swift.String, Any>?, complete: @escaping (_ responseData: Any?, _ responseStatus: Swift.Bool, _ statusCode: Swift.Int?) -> Swift.Void) throws -> Alamofire.DataRequest
  @objc deinit
}
public let fengeLineHeight: CoreFoundation.CGFloat
public let ScreenWidth: CoreFoundation.CGFloat
public let ScreenHeight: CoreFoundation.CGFloat
public var TSStatusBarHeight: CoreFoundation.CGFloat {
  get
}
public var TSLiuhaiHeight: CoreFoundation.CGFloat {
  get
}
public var RLTabbarHeight: CoreFoundation.CGFloat {
  get
}
public var TSTabbarHeight: CoreFoundation.CGFloat {
  get
}
public var TSBottomSafeAreaHeight: CoreFoundation.CGFloat {
  get
}
public var TSNavigationBarHeight: CoreFoundation.CGFloat {
  get
}
public let TSTopAdjustsScrollViewInsets: CoreFoundation.CGFloat
@objc @objcMembers final public class ChatDraftInfo : ObjectiveC.NSObject, Swift.Codable, SwiftyUserDefaults.DefaultsSerializable {
  @objc final public let sessionId: Swift.String
  @objc final public let draftText: Foundation.Data
  @objc final public let replyMessageId: Swift.String?
  @objc final public let mentionUsernames: [Swift.String]?
  @objc public init(sessionId: Swift.String, draftText: Foundation.Data, replyMessageId: Swift.String? = nil, mentionUsernames: [Swift.String]? = nil)
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.ChatDraftInfo]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.ChatDraftInfo>
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class secretMessageDuration : ObjectiveC.NSObject, Swift.Codable, SwiftyUserDefaults.DefaultsSerializable {
  @objc final public let sessionId: Swift.String
  @objc final public let duration: Swift.Int
  @objc public init(sessionId: Swift.String, duration: Swift.Int)
  public typealias ArrayBridge = SwiftyUserDefaults.DefaultsCodableBridge<[RLIMFeedSDK.secretMessageDuration]>
  public typealias Bridge = SwiftyUserDefaults.DefaultsCodableBridge<RLIMFeedSDK.secretMessageDuration>
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatManager : ObjectiveC.NSObject {
  @objc public static func saveDraft(sessionId: Swift.String, draftInfo: RLIMFeedSDK.ChatDraftInfo)
  @objc public static func loadDraft(sessionId: Swift.String) -> RLIMFeedSDK.ChatDraftInfo?
  @objc public static func setDurationForSecretMessage(sessionId: Swift.String, duration: RLIMFeedSDK.secretMessageDuration)
  @objc public static func loadDurationForSecretMessage(sessionId: Swift.String) -> RLIMFeedSDK.secretMessageDuration?
  @objc override dynamic public init()
  @objc deinit
}
public enum PopupMenuType {
  case defaultWhite
  case dark
  public static func == (a: RLIMFeedSDK.PopupMenuType, b: RLIMFeedSDK.PopupMenuType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PopupMenuPriorityDirection : Swift.Int {
  case top
  case bottom
  case left
  case right
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PopupMenuDelegate : ObjectiveC.NSObjectProtocol {
  @objc func popupMenuDidSelected(index: ObjectiveC.NSInteger, popupMenu: RLIMFeedSDK.PopupMenu)
  @objc optional func popupMenuBeganDismiss()
  @objc optional func popupMenuDidDismiss()
  @objc optional func popupMenuBeganShow()
  @objc optional func popupMenudidShow()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PopupMenu : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var rectCorner: UIKit.UIRectCorner {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isShowShadow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var showMaskView: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var dismissOnSelected: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var dismissOnTouchOutside: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var fontSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var offset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var borderWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var arrowWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var arrowHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var arrowPosition: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var arrowDirection: RLIMFeedSDK.PopupMenuArrowDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var priorityDirection: RLIMFeedSDK.PopupMenuPriorityDirection {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var maxVisibleCount: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public var backColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public var itemHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var type: RLIMFeedSDK.PopupMenuType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func showAtPoint(point: CoreFoundation.CGPoint, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, delegate: any RLIMFeedSDK.PopupMenuDelegate) -> RLIMFeedSDK.PopupMenu
  @objc @_Concurrency.MainActor(unsafe) public static func showAtPoint(point: CoreFoundation.CGPoint, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, delegate: any RLIMFeedSDK.PopupMenuDelegate, otherSettings: (RLIMFeedSDK.PopupMenu) -> ()) -> RLIMFeedSDK.PopupMenu
  @objc @_Concurrency.MainActor(unsafe) public static func showAtPoint(point: CoreFoundation.CGPoint, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, didSelectRow: @escaping ((ObjectiveC.NSInteger, Swift.String, RLIMFeedSDK.PopupMenu) -> ()), otherSettings: (RLIMFeedSDK.PopupMenu) -> ()) -> RLIMFeedSDK.PopupMenu
  @objc @_Concurrency.MainActor(unsafe) public static func showRelyOnView(view: UIKit.UIView, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, delegate: any RLIMFeedSDK.PopupMenuDelegate) -> RLIMFeedSDK.PopupMenu
  @objc @_Concurrency.MainActor(unsafe) public static func showRelyOnView(view: UIKit.UIView, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, didSelectRow: @escaping ((ObjectiveC.NSInteger, Swift.String, RLIMFeedSDK.PopupMenu) -> ()), otherSettings: (RLIMFeedSDK.PopupMenu) -> ()) -> RLIMFeedSDK.PopupMenu
  @objc @_Concurrency.MainActor(unsafe) public static func showRelyOnView(view: UIKit.UIView, titles: Swift.Array<Swift.String>, icons: Swift.Array<Swift.String>?, menuWidth itemWidth: CoreFoundation.CGFloat, delegate: any RLIMFeedSDK.PopupMenuDelegate, otherSettings: (RLIMFeedSDK.PopupMenu) -> ()) -> RLIMFeedSDK.PopupMenu
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
extension RLIMFeedSDK.PopupMenu {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension RLIMFeedSDK.PopupMenu : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public let errorNetworkInfo: Swift.String
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class Easing : UIKit.UICubicTimingParameters {
  @_Concurrency.MainActor(unsafe) public static let linear: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeIn: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOut: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOut: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInSine: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutSine: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutSine: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInQuad: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutQuad: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutQuad: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInCubic: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutCubic: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutCubic: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInQuart: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutQuart: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutQuart: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInQuint: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutQuint: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutQuint: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInExpo: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutExpo: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutExpo: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInCirc: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutCirc: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutCirc: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInBack: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeOutBack: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) public static let easeInOutBack: RLIMFeedSDK.Easing
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(animationCurve curve: UIKit.UIView.AnimationCurve)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(controlPoint1 point1: CoreFoundation.CGPoint, controlPoint2 point2: CoreFoundation.CGPoint)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class Animator : UIKit.UIViewPropertyAnimator {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(duration: Foundation.TimeInterval, timingParameters parameters: any UIKit.UITimingCurveProvider)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PopupContainerWindow : UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(windowScene: UIKit.UIWindowScene)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PopupWindowManager {
  public var popupContainerWindow: RLIMFeedSDK.PopupContainerWindow?
  public static let shared: RLIMFeedSDK.PopupWindowManager
  public func changeKeyWindow(rootViewController: UIKit.UIViewController?, height: CoreFoundation.CGFloat = 0.0, animated: Swift.Bool = true)
  @objc deinit
}
@objc @objcMembers public class CreateChatroomRequestResult : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let data: RLIMFeedSDK.CreateChatroomData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class CreateChatroomData : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let chatroom: RLIMFeedSDK.ChatroomResponseModel
  @objc final public let code: Swift.Int
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class ChatroomResponseModel : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let roomid: Swift.Int
  @objc final public let valid: Swift.Bool
  @objc final public let announcement: Swift.String?
  @objc final public let queuelevel: Swift.Int
  @objc final public let muted: Swift.Bool
  @objc final public let name: Swift.String
  @objc final public let broadcasturl: Swift.String?
  @objc final public let ext: Swift.String, creator: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class CloseChatroomRequestResult : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let data: RLIMFeedSDK.CloseChatroomData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class CloseChatroomData : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let roomid: Swift.Int
  @objc final public let valid: Swift.Bool
  @objc final public let desc: RLIMFeedSDK.CloseChatroomData?
  @objc final public let announcement: Swift.String?
  @objc final public let muted: Swift.Bool
  @objc final public let queuelevel: Swift.Int
  @objc final public let name: Swift.String
  final public let code: Swift.Int?
  @objc final public let broadcasturl: Swift.String?
  @objc final public let ext: Swift.String, creator: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol VideoPlayerSliderViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func aliyunPlayerViewSlider(_ slider: RLIMFeedSDK.VideoPlayerSliderView?, event: UIKit.UIControl.Event, clickedSlider sliderValue: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class VideoPlayerSliderView : UIKit.UISlider {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
open class Repeater : Swift.Equatable {
  public enum State : Swift.Equatable, Swift.CustomStringConvertible {
    case paused
    case running
    case executing
    case finished
    public static func == (lhs: RLIMFeedSDK.Repeater.State, rhs: RLIMFeedSDK.Repeater.State) -> Swift.Bool
    public var isRunning: Swift.Bool {
      get
    }
    public var isExecuting: Swift.Bool {
      get
    }
    public var isFinished: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Interval {
    case nanoseconds(Swift.Int)
    case microseconds(Swift.Int)
    case milliseconds(Swift.Int)
    case minutes(Swift.Int)
    case seconds(Swift.Double)
    case hours(Swift.Int)
    case days(Swift.Int)
  }
  public enum Mode {
    case infinite
    case finite(Swift.Int)
    case once
    public var countIterations: Swift.Int? {
      get
    }
    public var isInfinite: Swift.Bool {
      get
    }
  }
  public typealias Observer = ((RLIMFeedSDK.Repeater) -> Swift.Void)
  public typealias ObserverToken = Swift.UInt64
  public var state: RLIMFeedSDK.Repeater.State {
    get
  }
  public var onStateChanged: ((_ timer: RLIMFeedSDK.Repeater, _ state: RLIMFeedSDK.Repeater.State) -> Swift.Void)?
  public var mode: RLIMFeedSDK.Repeater.Mode {
    get
  }
  public var remainingIterations: Swift.Int? {
    get
  }
  public init(interval: RLIMFeedSDK.Repeater.Interval, mode: RLIMFeedSDK.Repeater.Mode = .infinite, tolerance: Dispatch.DispatchTimeInterval = .nanoseconds(0), queue: Dispatch.DispatchQueue? = nil, observer: @escaping RLIMFeedSDK.Repeater.Observer)
  @discardableResult
  public func observe(_ observer: @escaping RLIMFeedSDK.Repeater.Observer) -> RLIMFeedSDK.Repeater.ObserverToken
  public func remove(observer identifier: RLIMFeedSDK.Repeater.ObserverToken)
  public func removeAllObservers(thenStop stopTimer: Swift.Bool = false)
  @discardableResult
  public class func once(after interval: RLIMFeedSDK.Repeater.Interval, tolerance: Dispatch.DispatchTimeInterval = .nanoseconds(0), queue: Dispatch.DispatchQueue? = nil, _ observer: @escaping RLIMFeedSDK.Repeater.Observer) -> RLIMFeedSDK.Repeater
  @discardableResult
  public class func every(_ interval: RLIMFeedSDK.Repeater.Interval, count: Swift.Int? = nil, tolerance: Dispatch.DispatchTimeInterval = .nanoseconds(0), queue: Dispatch.DispatchQueue? = nil, _ handler: @escaping RLIMFeedSDK.Repeater.Observer) -> RLIMFeedSDK.Repeater
  public func fire(andPause pause: Swift.Bool = false)
  public func reset(_ interval: RLIMFeedSDK.Repeater.Interval?, restart: Swift.Bool = true)
  @discardableResult
  public func start() -> Swift.Bool
  @discardableResult
  public func pause() -> Swift.Bool
  @objc deinit
  public static func == (lhs: RLIMFeedSDK.Repeater, rhs: RLIMFeedSDK.Repeater) -> Swift.Bool
}
open class Throttler {
  public typealias Callback = (() -> Swift.Void)
  public enum Mode {
    case fixed
    case deferred
    public static func == (a: RLIMFeedSDK.Throttler.Mode, b: RLIMFeedSDK.Throttler.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var callback: RLIMFeedSDK.Throttler.Callback?
  public var throttle: Dispatch.DispatchTimeInterval {
    get
  }
  public init(time: RLIMFeedSDK.Repeater.Interval, queue: Dispatch.DispatchQueue? = nil, mode: RLIMFeedSDK.Throttler.Mode = .fixed, immediateFire: Swift.Bool = false, _ callback: RLIMFeedSDK.Throttler.Callback? = nil)
  public func call()
  @objc deinit
}
@objc @objcMembers public class UserAvatarUI : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let username: Swift.String
  @objc final public let avatarUrl: Swift.String?
  @objc final public let displayname: Swift.String
  @objc public var verificationIcon: Swift.String?
  @objc public var verificationType: Swift.String?
  @objc public init(username: Swift.String, avatarUrl: Swift.String?, displayname: Swift.String, verificationIcon: Swift.String?, verificationType: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Optional where Wrapped == Swift.String {
  public func or(_ val: Swift.String) -> Swift.String
  public var orEmpty: Swift.String {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.Double {
  public var orZero: Swift.Double {
    get
  }
}
extension Swift.Optional where Wrapped == CoreFoundation.CGFloat {
  public var orZero: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.Int {
  public var orInvalidateInt: Swift.Int {
    get
  }
  public var orZero: Swift.Int {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.Bool {
  public var orFalse: Swift.Bool {
    get
  }
}
public enum ShowPinType {
  case egg, purchase
  public static func == (a: RLIMFeedSDK.ShowPinType, b: RLIMFeedSDK.ShowPinType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FeedIMSDKManagerDelegate : AnyObject {
  func didClickHomePage(userId: Swift.Int, username: Swift.String?, nickname: Swift.String?, shouldShowTab: Swift.Bool, isFromReactionList: Swift.Bool, isTeam: Swift.Bool)
  func didShowPin(type: RLIMFeedSDK.ShowPinType, completion: ((Swift.String) -> Swift.Void)?, cancel: RLIMFeedSDK.EmptyClosure?, needDisplayError: Swift.Bool)
  func didOpenMiniProgram(appId: Swift.String, path: Swift.String?)
  func didShowDeeplink(urlString: Swift.String)
  func didChangeCreateFeedProgressStatus(status: RLIMFeedSDK.PostProgressStatus)
  func didClickScanQR()
  func didClickNearbyPeople()
  func didClickContacts()
}
@objc public enum TransferType : Swift.Int {
  case personal
  case group
  case reward
  case transfer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class SendEggResult : ObjectiveC.NSObject, RLIMFeedSDK.APIResponseType {
  @objc final public let state: RLIMFeedSDK.ApiState
  @objc final public let data: RLIMFeedSDK.SendEggData
  @objc final public let message: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SendEggData : ObjectiveC.NSObject, Swift.Decodable {
  public var eggId: Swift.Int?
  @objc public var _eggId: Foundation.NSNumber? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class ClaimEggResponse : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let header: RLIMFeedSDK.ClaimEggResponse.EggHeader
  @objc final public let sender: RLIMFeedSDK.ClaimEggResponse.EggUser
  @objc final public let receivers: [RLIMFeedSDK.ClaimEggResponse.EggReceivers]
  @objc final public let eggInfo: RLIMFeedSDK.ClaimEggResponse.ClaimEggInfo
  @objc public class EggHeader : ObjectiveC.NSObject, Swift.Decodable {
    final public let wishes: Swift.String
    final public let amount: Swift.String?
    final public let yippsMsg: Swift.String?
    final public let messages: Swift.String?
    final public let needSubscribe: Swift.Bool
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class EggUser : ObjectiveC.NSObject, Swift.Decodable {
    final public let uid: Swift.Int
    final public let name: Swift.String
    final public let username: Swift.String
    final public let avatar: RLIMFeedSDK.Avatar?
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class EggReceivers : ObjectiveC.NSObject, Swift.Decodable {
    final public let user: RLIMFeedSDK.ClaimEggResponse.EggUser
    final public let amount: Swift.String
    final public let redeemTime: Swift.String
    public var luckyStar: Swift.Int?
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class ClaimEggInfo : ObjectiveC.NSObject, Swift.Decodable {
    final public let amount: Swift.String?
    final public let amountRemaining: Swift.String?
    final public let quantity: Swift.Int?
    final public let quantityRemaining: Swift.Int?
    final public let isRandom: Swift.Int?
    final public let eggId: Swift.Int
    final public let treasureTheme: RLIMFeedSDK.ClaimEggResponse.ClaimEggInfo.TreasureTheme?
    final public let type: Swift.Int?
    final public let subscriberOnly: Swift.Bool?
    @objc public class TreasureTheme : ObjectiveC.NSObject, Swift.Decodable {
      final public let id: Swift.Int?
      final public let title: Swift.String?, boxImage: Swift.String?, backgroundImagePortrait: Swift.String?, backgroundImageLandscape: Swift.String?
      @objc deinit
      required public init(from decoder: any Swift.Decoder) throws
    }
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class EggResponseModel : ObjectiveC.NSObject, Swift.Decodable {
  final public let isGroup: Swift.Bool?
  @objc final public let owner: RLIMFeedSDK.EggResponseModel.Owner
  final public let egg: RLIMFeedSDK.EggResponseModel.Egg
  final public let liveEgg: RLIMFeedSDK.EggResponseModel.LiveEgg?
  @objc final public let receiver: [RLIMFeedSDK.EggResponseModel.Owner]?
  final public let isFirstAttempt: Swift.Bool?
  @objc public class Owner : ObjectiveC.NSObject, Swift.Decodable {
    final public let id: Swift.Int
    final public let ownerID: Swift.Int?
    final public let title: Swift.String, body: Swift.String
    final public let type: Swift.Int
    final public let targetType: Swift.String?
    final public let targetID: Swift.String?
    final public let currency: Swift.Int
    final public let amount: Swift.String
    final public let state: Swift.Int
    final public let redpacketID: Swift.Int
    final public let amountRemaining: Swift.String
    final public let quantity: Swift.Int, isRandomAmount: Swift.Int, quantityRemaining: Swift.Int
    final public let groupID: Swift.String?
    final public let user: RLIMFeedSDK.EggResponseModel.User
    final public let createdAt: Swift.String
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class User : ObjectiveC.NSObject, Swift.Decodable {
    final public let id: Swift.Int
    final public let name: Swift.String
    final public let avatar: RLIMFeedSDK.EggResponseModel.Avatar?
    final public let official: Swift.Int
    final public let extra: RLIMFeedSDK.EggResponseModel.Extra
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  public class Egg : Swift.Codable {
    final public let yipps: Swift.String?
    final public let yippsMessage: Swift.String
    final public let msg: Swift.String
    final public let isExpired: Swift.Bool
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  public class Avatar : Swift.Codable {
    final public let url: Swift.String
    final public let size: Swift.Int
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class Extra : ObjectiveC.NSObject, Swift.Decodable {
    final public let userID: Swift.Int, likesCount: Swift.Int, commentsCount: Swift.Int, followersCount: Swift.Int
    final public let followingsCount: Swift.Int
    final public let updatedAt: Swift.String
    final public let feedsCount: Swift.Int, questionsCount: Swift.Int, answersCount: Swift.Int, checkinCount: Swift.Int
    final public let lastCheckinCount: Swift.Int
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
  public class LiveEgg : Swift.Codable {
    final public let treasureTheme: RLIMFeedSDK.EggResponseModel.TreasureTheme?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  public class TreasureTheme : Swift.Codable {
    final public let id: Swift.Int?
    final public let title: Swift.String?, boxImage: Swift.String?, backgroundImagePortrait: Swift.String?, backgroundImageLandscape: Swift.String?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class GroupEggResponse : ObjectiveC.NSObject, RLIMFeedSDK.APIResponseType {
  @objc final public let state: RLIMFeedSDK.ApiState
  @objc final public let data: RLIMFeedSDK.GroupEggData
  @objc final public let message: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class EggInfo : ObjectiveC.NSObject {
  @objc final public let nickname: Swift.String, points: Swift.String, headsmall: Swift.String, remarks: Swift.String
  @objc public init(nickname: Swift.String, points: Swift.String, headsmall: Swift.String, remarks: Swift.String)
  @objc deinit
}
@objc @objcMembers public class Detail : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let headsmall: Swift.String?
  @objc final public let uid: Swift.String, username: Swift.String, nickname: Swift.String, points: Swift.String, opentime: Swift.String
  @objc final public let fuid: Swift.String?, friend: Swift.String?, fnickname: Swift.String?, fheadsmall: Swift.String?, is_open: Swift.String?
  @objc public init(uid: Swift.String, username: Swift.String, nickname: Swift.String, headsmall: Swift.String?, points: Swift.String, opentime: Swift.String, fuid: Swift.String, friend: Swift.String, fnickname: Swift.String, fheadsmall: Swift.String, is_open: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class GroupEgg : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let rid: Swift.String, uid: Swift.String, username: Swift.String, tid: Swift.String
  @objc final public let points: Swift.String, pointsrmng: Swift.String, qty: Swift.String, remaining: Swift.String, timecreated: Swift.String
  @objc final public let isRand: Swift.String, isRefund: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class PersonalEggData : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let eggs: [RLIMFeedSDK.PersonalEgg]?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class GroupEggData : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let eggs: [RLIMFeedSDK.GroupEgg]?
  @objc final public let detail: [RLIMFeedSDK.Detail]?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc public class PersonalEgg : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let uid: Swift.String
  @objc final public let username: Swift.String
  @objc public var nickname: Swift.String?
  @objc final public let headsmall: Swift.String
  @objc final public let fuid: Swift.String
  @objc final public let friend: Swift.String
  @objc final public let fnickname: Swift.String
  @objc final public let fheadsmall: Swift.String?
  @objc final public let points: Swift.String
  @objc final public let remarks: Swift.String
  @objc final public let isOpen: Swift.String
  @objc final public let isRefund: Swift.String
  @objc final public let timecreated: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objcMembers @objc public class ApiState : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let code: Swift.Int
  @objc final public let msg: Swift.String, debugMsg: Swift.String, url: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum LiveStarListTableType {
  case daily, weekly, monthly
  public static func == (a: RLIMFeedSDK.LiveStarListTableType, b: RLIMFeedSDK.LiveStarListTableType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Calendar {
  public static func startDayOfMonth(in month: Swift.Int, year: Swift.Int) -> Swift.Int
  public static func numberOfDays(in month: Swift.Int, year: Swift.Int) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TSViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension RLIMFeedSDK.TSViewController {
  @_Concurrency.MainActor(unsafe) public func showToast(with title: Swift.String, desc: Swift.String)
}
extension UIKit.UITabBarController {
  @_Concurrency.MainActor(unsafe) public func showToast(with title: Swift.String, desc: Swift.String)
}
extension RLIMFeedSDK.TSViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class VerticalAlignLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public init(deviceToken: Foundation.Data)
  public static var empty: Swift.String {
    get
  }
  public var containsOnlyEmoji: Swift.Bool {
    get
  }
  public var containOnlyNumber: Swift.Bool {
    get
  }
  public func toInt() -> Swift.Int
  public func toDouble() -> Swift.Double
  public var emojis: [Swift.Character] {
    get
  }
  public var firstLetter: Swift.String {
    get
  }
  public func toBdayDate(by format: Swift.String) -> Foundation.Date
  public func toDate(from fromFormat: Swift.String = "yyyy-MM-dd HH:mm:ss", to toFormat: Swift.String) -> Swift.String
  public func toUTCDate(from fromFormat: Swift.String = "yyyy-MM-dd HH:mm:ss", to toFormat: Swift.String) -> Swift.String
  public func convertDateFromString(timeType: Swift.Int) -> Swift.String
  public func convertToDictionary() -> [Swift.String : Any]?
  public var urlValue: Foundation.URL? {
    get
  }
  public func lines(font: UIKit.UIFont, width: CoreFoundation.CGFloat) -> Swift.Int
  public func checkFileIsExistSpecial(appendname: Swift.String) -> Swift.String?
  public func checkFileIsExist() -> Swift.String?
  public func getUrlStringFromString() -> Swift.String?
  public func getURLStringFromSubstring(text: Swift.String) -> Swift.String?
  public func isURL() -> Swift.Bool
  public func removeNewLineChar() -> Swift.String?
  public func findLanguage() -> Swift.String
  public func detectLanguages() -> [Swift.String]
  public static func format(strings: [Swift.String], boldFont: UIKit.UIFont = UIFont(name: "PingFangTC-Regular", size: 11.0) ?? UIFont.boldSystemFont(ofSize: 14), boldColor: UIKit.UIColor = UIColor(red: 0.93, green: 0.10, blue: 0.23, alpha: 1.00), inString string: Swift.String, font: UIKit.UIFont = UIFont.systemFont(ofSize: 11), color: UIKit.UIColor = UIColor(red: 155.0/255.0, green: 155.0/255.0, blue: 155.0/255.0, alpha: 1.0)) -> Foundation.NSAttributedString
  public func replace(at index: Swift.Int, _ newChar: Swift.Character) -> Swift.String
  public func randomStringWithLength(length: Swift.Int) -> Swift.String
  public func withHashtagPrefix() -> Swift.String
  public func isValidURL() -> Swift.Bool
  public func transformToPinYin() -> Swift.String
  public func isNotLetter() -> Swift.Bool
  public func removingSpecialCharacters() -> Swift.String
  public func rangesOfString(of substring: Swift.String, options: Swift.String.CompareOptions = [], locale: Foundation.Locale? = nil) -> [Swift.Range<Swift.String.Index>]
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class URLParser : ObjectiveC.NSObject {
  @objc public static func parse(_ url: Swift.String, completion: ((Swift.String, Swift.String, Swift.String) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
public enum ApiResult<Value> {
  case success(Value)
  case failure(any Swift.Error)
}
public enum ResultErrorWithValue<Value> {
  case success(Value)
  case failure(Value)
}
public typealias ResultCallback<Value> = (RLIMFeedSDK.ApiResult<Value>) -> Swift.Void
public typealias ResultWithErrorCallback<Value> = (RLIMFeedSDK.ResultErrorWithValue<Value>) -> Swift.Void
public struct DataContainer<Results> : Swift.Decodable where Results : Swift.Decodable {
  public let offset: Swift.Int
  public let limit: Swift.Int
  public let total: Swift.Int
  public let count: Swift.Int
  public let results: Results
  public init(from decoder: any Swift.Decoder) throws
}
public struct Image : Swift.Decodable {
  public let url: Foundation.URL
  public init(from decoder: any Swift.Decoder) throws
}
public enum APIError : Swift.Error {
  case encoding
  case decoding
  case server(code: Swift.Int, message: Swift.String)
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
}
extension RLIMFeedSDK.APIError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
@objc extension Foundation.NSError {
  @objc dynamic public var errorCode: Swift.Int {
    @objc get
  }
  @objc dynamic public var errorMessage: Swift.String {
    @objc get
  }
}
public enum WalletRechargeOrderType : Swift.String {
  case AlipayOrder
  case WechatOrder
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WalletRechargeType : Swift.String {
  case alipay
  case wx
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WalletCashType : Swift.String {
  case alipay
  case wechat
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.Int {
  public var isEqualZero: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FullScreenViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func setStatusBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LoadableButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var shadowAdded: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var indicator: any UIKit.UIView & RLIMFeedSDK.IndicatorProtocol
  @_Concurrency.MainActor(unsafe) open var withShadow: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var _textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var shadowLayer: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open var entireViewGroup: [UIKit.UIView] {
    get
  }
  @available(iOS 13.0, *)
  public enum ButtonStyle {
    case fill
    case outline
    public static func == (a: RLIMFeedSDK.LoadableButton.ButtonStyle, b: RLIMFeedSDK.LoadableButton.ButtonStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect = .zero, icon: UIKit.UIImage? = nil, text: Swift.String? = nil, textColor: UIKit.UIColor? = .white, font: UIKit.UIFont? = nil, bgColor: UIKit.UIColor = .black, cornerRadius: CoreFoundation.CGFloat = 12.0, withShadow: Swift.Bool = false)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) convenience public init(icon: UIKit.UIImage? = nil, text: Swift.String? = nil, font: UIKit.UIFont? = nil, cornerRadius: CoreFoundation.CGFloat = 12.0, withShadow: Swift.Bool = false, buttonStyle: RLIMFeedSDK.LoadableButton.ButtonStyle)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func showLoader(userInteraction: Swift.Bool, _ completion: RLIMFeedSDK.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) open func showLoaderWithImage(userInteraction: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func showLoader(_ viewsToBeHidden: [UIKit.UIView?], userInteraction: Swift.Bool = false, _ completion: RLIMFeedSDK.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) open func hideLoader(_ completion: RLIMFeedSDK.LBCallback = nil)
  @_Concurrency.MainActor(unsafe) public func fillContent()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension UIKit.UIActivityIndicatorView : RLIMFeedSDK.IndicatorProtocol {
  @_Concurrency.MainActor(unsafe) public var radius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var color: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setupAnimation(in layer: QuartzCore.CALayer, size: CoreFoundation.CGSize)
}
@objc public enum DateType : Swift.Int {
  case simple = 0
  case normal
  case detail
  case walletList
  case walletDetail
  case timeOnly
  case messageRequestTime
  case tip
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class TSDate : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  public init(now: Foundation.Date)
  @objc public func dateString(_ type: RLIMFeedSDK.DateType, nsDate: Foundation.NSDate) -> Swift.String
  @objc public func dateString(_ type: RLIMFeedSDK.DateType, nDate: Foundation.Date, dateFormat: Swift.String = "MM-dd") -> Swift.String
  @objc deinit
}
public func handleException(_ error: any Swift.Error)
public typealias DidEnterPasswordClosure = (Swift.String?) -> Swift.Void
@objc public protocol PopupDialogFactoryType {
  @objc func makeEnterPasswordDialog(buttonAction: RLIMFeedSDK.DidEnterPasswordClosure?) -> UIKit.UIViewController
}
extension RLIMFeedSDK.WalletType : Swift.Equatable {}
extension RLIMFeedSDK.WalletType : Swift.Hashable {}
extension RLIMFeedSDK.WalletType : Swift.RawRepresentable {}
extension RLIMFeedSDK.ExpandableLabel.TextReplacementType : Swift.Equatable {}
extension RLIMFeedSDK.ExpandableLabel.TextReplacementType : Swift.Hashable {}
extension RLIMFeedSDK.AppModuleId : Swift.Equatable {}
extension RLIMFeedSDK.AppModuleId : Swift.Hashable {}
extension RLIMFeedSDK.AppModuleId : Swift.RawRepresentable {}
extension RLIMFeedSDK.BuildConfiguration : Swift.Equatable {}
extension RLIMFeedSDK.BuildConfiguration : Swift.Hashable {}
extension RLIMFeedSDK.ServerEnvironment : Swift.Equatable {}
extension RLIMFeedSDK.ServerEnvironment : Swift.Hashable {}
extension RLIMFeedSDK.YPHTTPMethod : Swift.Equatable {}
extension RLIMFeedSDK.YPHTTPMethod : Swift.Hashable {}
extension RLIMFeedSDK.YPHTTPMethod : Swift.RawRepresentable {}
extension RLIMFeedSDK.ErrorCode : Swift.Equatable {}
extension RLIMFeedSDK.ErrorCode : Swift.Hashable {}
extension RLIMFeedSDK.ErrorCode : Swift.RawRepresentable {}
extension RLIMFeedSDK.TSToolType : Swift.Equatable {}
extension RLIMFeedSDK.TSToolType : Swift.Hashable {}
extension RLIMFeedSDK.TSToolType : Swift.RawRepresentable {}
extension RLIMFeedSDK.TSToolChoose.ArrowPosition : Swift.Equatable {}
extension RLIMFeedSDK.TSToolChoose.ArrowPosition : Swift.Hashable {}
extension RLIMFeedSDK.TSToolChoose.ArrowPosition : Swift.RawRepresentable {}
extension RLIMFeedSDK.CountType : Swift.Equatable {}
extension RLIMFeedSDK.CountType : Swift.Hashable {}
extension RLIMFeedSDK.LoggingType : Swift.Equatable {}
extension RLIMFeedSDK.LoggingType : Swift.Hashable {}
extension RLIMFeedSDK.PopupMenuArrowDirection : Swift.Equatable {}
extension RLIMFeedSDK.PopupMenuArrowDirection : Swift.Hashable {}
extension RLIMFeedSDK.PopupMenuArrowDirection : Swift.RawRepresentable {}
extension RLIMFeedSDK.AppFonts.Body : Swift.Equatable {}
extension RLIMFeedSDK.AppFonts.Body : Swift.Hashable {}
extension RLIMFeedSDK.AppFonts.Headline : Swift.Equatable {}
extension RLIMFeedSDK.AppFonts.Headline : Swift.Hashable {}
extension RLIMFeedSDK.AppFonts.Tag : Swift.Equatable {}
extension RLIMFeedSDK.AppFonts.Tag : Swift.Hashable {}
extension RLIMFeedSDK.Event : Swift.Equatable {}
extension RLIMFeedSDK.Event : Swift.Hashable {}
extension RLIMFeedSDK.Event : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.FUControllerMode : Swift.Equatable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.FUControllerMode : Swift.Hashable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.FUControllerMode : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.contentType : Swift.Equatable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.contentType : Swift.Hashable {}
@available(*, deprecated, message: "Use ContactsPickerConfig instead.")
extension RLIMFeedSDK.ContactSelectorConfig.contentType : Swift.RawRepresentable {}
extension RLIMFeedSDK.HorizontalPageControlView.HorizontalPageControlType : Swift.Equatable {}
extension RLIMFeedSDK.HorizontalPageControlView.HorizontalPageControlType : Swift.Hashable {}
extension RLIMFeedSDK.LanguageIdentifier : Swift.Equatable {}
extension RLIMFeedSDK.LanguageIdentifier : Swift.Hashable {}
extension RLIMFeedSDK.LanguageIdentifier : Swift.RawRepresentable {}
extension RLIMFeedSDK.StickerListingType : Swift.Equatable {}
extension RLIMFeedSDK.StickerListingType : Swift.Hashable {}
extension RLIMFeedSDK.StickerListingType : Swift.RawRepresentable {}
extension RLIMFeedSDK.StickerType : Swift.Equatable {}
extension RLIMFeedSDK.StickerType : Swift.Hashable {}
extension RLIMFeedSDK.StickerType : Swift.RawRepresentable {}
extension RLIMFeedSDK.StickerBannerActionType : Swift.Equatable {}
extension RLIMFeedSDK.StickerBannerActionType : Swift.Hashable {}
extension RLIMFeedSDK.StickerBannerActionType : Swift.RawRepresentable {}
extension RLIMFeedSDK.cacheType : Swift.Equatable {}
extension RLIMFeedSDK.cacheType : Swift.Hashable {}
extension RLIMFeedSDK.cacheType : Swift.RawRepresentable {}
extension RLIMFeedSDK.VerifyCacheUserImageType : Swift.Equatable {}
extension RLIMFeedSDK.VerifyCacheUserImageType : Swift.Hashable {}
extension RLIMFeedSDK.VerifyCacheUserImageType : Swift.RawRepresentable {}
extension RLIMFeedSDK.ColorConfig : Swift.Equatable {}
extension RLIMFeedSDK.ColorConfig : Swift.Hashable {}
extension RLIMFeedSDK.TSURLPath : Swift.Equatable {}
extension RLIMFeedSDK.TSURLPath : Swift.Hashable {}
extension RLIMFeedSDK.TSURLPath : Swift.RawRepresentable {}
extension RLIMFeedSDK.Theme : Swift.Equatable {}
extension RLIMFeedSDK.Theme : Swift.Hashable {}
extension RLIMFeedSDK.MessageStatus : Swift.Equatable {}
extension RLIMFeedSDK.MessageStatus : Swift.Hashable {}
extension RLIMFeedSDK.MessageStatus : Swift.RawRepresentable {}
extension RLIMFeedSDK.MessageType : Swift.Equatable {}
extension RLIMFeedSDK.MessageType : Swift.Hashable {}
extension RLIMFeedSDK.MessageType : Swift.RawRepresentable {}
extension RLIMFeedSDK.PostProgressStatus : Swift.Equatable {}
extension RLIMFeedSDK.PostProgressStatus : Swift.Hashable {}
extension RLIMFeedSDK.TSPopUpType : Swift.Equatable {}
extension RLIMFeedSDK.TSPopUpType : Swift.Hashable {}
extension RLIMFeedSDK.TSPopUpType : Swift.RawRepresentable {}
extension RLIMFeedSDK.Typist.KeyboardEvent : Swift.Equatable {}
extension RLIMFeedSDK.Typist.KeyboardEvent : Swift.Hashable {}
extension RLIMFeedSDK.VoucherBannerType : Swift.Equatable {}
extension RLIMFeedSDK.VoucherBannerType : Swift.Hashable {}
extension RLIMFeedSDK.VoucherButtonType : Swift.Equatable {}
extension RLIMFeedSDK.VoucherButtonType : Swift.Hashable {}
extension RLIMFeedSDK.BehaviorType : Swift.Equatable {}
extension RLIMFeedSDK.BehaviorType : Swift.Hashable {}
extension RLIMFeedSDK.BehaviorType : Swift.RawRepresentable {}
extension RLIMFeedSDK.ItemType : Swift.Equatable {}
extension RLIMFeedSDK.ItemType : Swift.Hashable {}
extension RLIMFeedSDK.ItemType : Swift.RawRepresentable {}
extension RLIMFeedSDK.ModuleId : Swift.Equatable {}
extension RLIMFeedSDK.ModuleId : Swift.Hashable {}
extension RLIMFeedSDK.ModuleId : Swift.RawRepresentable {}
extension RLIMFeedSDK.PageId : Swift.Equatable {}
extension RLIMFeedSDK.PageId : Swift.Hashable {}
extension RLIMFeedSDK.PageId : Swift.RawRepresentable {}
extension RLIMFeedSDK.MKToolTip.ArrowPosition : Swift.Equatable {}
extension RLIMFeedSDK.MKToolTip.ArrowPosition : Swift.Hashable {}
extension RLIMFeedSDK.MKToolTip.ArrowPosition : Swift.RawRepresentable {}
extension RLIMFeedSDK.RewardType : Swift.Equatable {}
extension RLIMFeedSDK.RewardType : Swift.Hashable {}
extension RLIMFeedSDK.RewardType : Swift.RawRepresentable {}
extension RLIMFeedSDK.LineViewSide : Swift.Equatable {}
extension RLIMFeedSDK.LineViewSide : Swift.Hashable {}
extension RLIMFeedSDK.RquestNetworkDataError : Swift.Equatable {}
extension RLIMFeedSDK.RquestNetworkDataError : Swift.Hashable {}
extension RLIMFeedSDK.NetworkError : Swift.Equatable {}
extension RLIMFeedSDK.NetworkError : Swift.Hashable {}
extension RLIMFeedSDK.NetworkError : Swift.RawRepresentable {}
extension RLIMFeedSDK.PopupMenuType : Swift.Equatable {}
extension RLIMFeedSDK.PopupMenuType : Swift.Hashable {}
extension RLIMFeedSDK.PopupMenuPriorityDirection : Swift.Equatable {}
extension RLIMFeedSDK.PopupMenuPriorityDirection : Swift.Hashable {}
extension RLIMFeedSDK.PopupMenuPriorityDirection : Swift.RawRepresentable {}
extension RLIMFeedSDK.Repeater.State : Swift.Hashable {}
extension RLIMFeedSDK.Throttler.Mode : Swift.Equatable {}
extension RLIMFeedSDK.Throttler.Mode : Swift.Hashable {}
extension RLIMFeedSDK.ShowPinType : Swift.Equatable {}
extension RLIMFeedSDK.ShowPinType : Swift.Hashable {}
extension RLIMFeedSDK.TransferType : Swift.Equatable {}
extension RLIMFeedSDK.TransferType : Swift.Hashable {}
extension RLIMFeedSDK.TransferType : Swift.RawRepresentable {}
extension RLIMFeedSDK.LiveStarListTableType : Swift.Equatable {}
extension RLIMFeedSDK.LiveStarListTableType : Swift.Hashable {}
extension RLIMFeedSDK.WalletRechargeOrderType : Swift.Equatable {}
extension RLIMFeedSDK.WalletRechargeOrderType : Swift.Hashable {}
extension RLIMFeedSDK.WalletRechargeOrderType : Swift.RawRepresentable {}
extension RLIMFeedSDK.WalletRechargeType : Swift.Equatable {}
extension RLIMFeedSDK.WalletRechargeType : Swift.Hashable {}
extension RLIMFeedSDK.WalletRechargeType : Swift.RawRepresentable {}
extension RLIMFeedSDK.WalletCashType : Swift.Equatable {}
extension RLIMFeedSDK.WalletCashType : Swift.Hashable {}
extension RLIMFeedSDK.WalletCashType : Swift.RawRepresentable {}
@available(iOS 13.0, *)
extension RLIMFeedSDK.LoadableButton.ButtonStyle : Swift.Equatable {}
@available(iOS 13.0, *)
extension RLIMFeedSDK.LoadableButton.ButtonStyle : Swift.Hashable {}
extension RLIMFeedSDK.DateType : Swift.Equatable {}
extension RLIMFeedSDK.DateType : Swift.Hashable {}
extension RLIMFeedSDK.DateType : Swift.RawRepresentable {}
